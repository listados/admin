{"version":3,"sources":["jquery.inputmask.js","jquery.inputmask.date.extensions.js","jquery.inputmask.extensions.js","jquery.maskMoney.js","jquery.serializejson.min.js","function_all.js","clients.js"],"names":[],"mappingslDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxekBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"clients.min.js","sourcesContent":["/**\r\n* @license Input Mask plugin for jquery\r\n* http://github.com/RobinHerbots/jquery.inputmask\r\n* Copyright (c) 2010 - 2014 Robin Herbots\r\n* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\r\n* Version: 0.0.0\r\n*/\r\n\r\n(function ($) {\r\n    if ($.fn.inputmask === undefined) {\r\n        //helper functions    \r\n        function isInputEventSupported(eventName) {\r\n            var el = document.createElement('input'),\r\n            eventName = 'on' + eventName,\r\n            isSupported = (eventName in el);\r\n            if (!isSupported) {\r\n                el.setAttribute(eventName, 'return;');\r\n                isSupported = typeof el[eventName] == 'function';\r\n            }\r\n            el = null;\r\n            return isSupported;\r\n        }\r\n        function resolveAlias(aliasStr, options, opts) {\r\n            var aliasDefinition = opts.aliases[aliasStr];\r\n            if (aliasDefinition) {\r\n                if (aliasDefinition.alias) resolveAlias(aliasDefinition.alias, undefined, opts); //alias is another alias\r\n                $.extend(true, opts, aliasDefinition);  //merge alias definition in the options\r\n                $.extend(true, opts, options);  //reapply extra given options\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        function generateMaskSets(opts) {\r\n            var ms = [];\r\n            var genmasks = []; //used to keep track of the masks that where processed, to avoid duplicates\r\n            function getMaskTemplate(mask) {\r\n                if (opts.numericInput) {\r\n                    mask = mask.split('').reverse().join('');\r\n                }\r\n                var escaped = false, outCount = 0, greedy = opts.greedy, repeat = opts.repeat;\r\n                if (repeat == \"*\") greedy = false;\r\n                //if (greedy == true && opts.placeholder == \"\") opts.placeholder = \" \";\r\n                if (mask.length == 1 && greedy == false && repeat != 0) { opts.placeholder = \"\"; } //hide placeholder with single non-greedy mask\r\n                var singleMask = $.map(mask.split(\"\"), function (element, index) {\r\n                    var outElem = [];\r\n                    if (element == opts.escapeChar) {\r\n                        escaped = true;\r\n                    }\r\n                    else if ((element != opts.optionalmarker.start && element != opts.optionalmarker.end) || escaped) {\r\n                        var maskdef = opts.definitions[element];\r\n                        if (maskdef && !escaped) {\r\n                            for (var i = 0; i < maskdef.cardinality; i++) {\r\n                                outElem.push(opts.placeholder.charAt((outCount + i) % opts.placeholder.length));\r\n                            }\r\n                        } else {\r\n                            outElem.push(element);\r\n                            escaped = false;\r\n                        }\r\n                        outCount += outElem.length;\r\n                        return outElem;\r\n                    }\r\n                });\r\n\r\n                //allocate repetitions\r\n                var repeatedMask = singleMask.slice();\r\n                for (var i = 1; i < repeat && greedy; i++) {\r\n                    repeatedMask = repeatedMask.concat(singleMask.slice());\r\n                }\r\n\r\n                return { \"mask\": repeatedMask, \"repeat\": repeat, \"greedy\": greedy };\r\n            }\r\n            //test definition => {fn: RegExp/function, cardinality: int, optionality: bool, newBlockMarker: bool, offset: int, casing: null/upper/lower, def: definitionSymbol}\r\n            function getTestingChain(mask) {\r\n                if (opts.numericInput) {\r\n                    mask = mask.split('').reverse().join('');\r\n                }\r\n                var isOptional = false, escaped = false;\r\n                var newBlockMarker = false; //indicates wheter the begin/ending of a block should be indicated\r\n\r\n                return $.map(mask.split(\"\"), function (element, index) {\r\n                    var outElem = [];\r\n\r\n                    if (element == opts.escapeChar) {\r\n                        escaped = true;\r\n                    } else if (element == opts.optionalmarker.start && !escaped) {\r\n                        isOptional = true;\r\n                        newBlockMarker = true;\r\n                    }\r\n                    else if (element == opts.optionalmarker.end && !escaped) {\r\n                        isOptional = false;\r\n                        newBlockMarker = true;\r\n                    }\r\n                    else {\r\n                        var maskdef = opts.definitions[element];\r\n                        if (maskdef && !escaped) {\r\n                            var prevalidators = maskdef[\"prevalidator\"], prevalidatorsL = prevalidators ? prevalidators.length : 0;\r\n                            for (var i = 1; i < maskdef.cardinality; i++) {\r\n                                var prevalidator = prevalidatorsL >= i ? prevalidators[i - 1] : [], validator = prevalidator[\"validator\"], cardinality = prevalidator[\"cardinality\"];\r\n                                outElem.push({ fn: validator ? typeof validator == 'string' ? new RegExp(validator) : new function () { this.test = validator; } : new RegExp(\".\"), cardinality: cardinality ? cardinality : 1, optionality: isOptional, newBlockMarker: isOptional == true ? newBlockMarker : false, offset: 0, casing: maskdef[\"casing\"], def: maskdef[\"definitionSymbol\"] || element });\r\n                                if (isOptional == true) //reset newBlockMarker\r\n                                    newBlockMarker = false;\r\n                            }\r\n                            outElem.push({ fn: maskdef.validator ? typeof maskdef.validator == 'string' ? new RegExp(maskdef.validator) : new function () { this.test = maskdef.validator; } : new RegExp(\".\"), cardinality: maskdef.cardinality, optionality: isOptional, newBlockMarker: newBlockMarker, offset: 0, casing: maskdef[\"casing\"], def: maskdef[\"definitionSymbol\"] || element });\r\n                        } else {\r\n                            outElem.push({ fn: null, cardinality: 0, optionality: isOptional, newBlockMarker: newBlockMarker, offset: 0, casing: null, def: element });\r\n                            escaped = false;\r\n                        }\r\n                        //reset newBlockMarker\r\n                        newBlockMarker = false;\r\n                        return outElem;\r\n                    }\r\n                });\r\n            }\r\n            function markOptional(maskPart) { //needed for the clearOptionalTail functionality\r\n                return opts.optionalmarker.start + maskPart + opts.optionalmarker.end;\r\n            }\r\n            function splitFirstOptionalEndPart(maskPart) {\r\n                var optionalStartMarkers = 0, optionalEndMarkers = 0, mpl = maskPart.length;\r\n                for (var i = 0; i < mpl; i++) {\r\n                    if (maskPart.charAt(i) == opts.optionalmarker.start) {\r\n                        optionalStartMarkers++;\r\n                    }\r\n                    if (maskPart.charAt(i) == opts.optionalmarker.end) {\r\n                        optionalEndMarkers++;\r\n                    }\r\n                    if (optionalStartMarkers > 0 && optionalStartMarkers == optionalEndMarkers)\r\n                        break;\r\n                }\r\n                var maskParts = [maskPart.substring(0, i)];\r\n                if (i < mpl) {\r\n                    maskParts.push(maskPart.substring(i + 1, mpl));\r\n                }\r\n                return maskParts;\r\n            }\r\n            function splitFirstOptionalStartPart(maskPart) {\r\n                var mpl = maskPart.length;\r\n                for (var i = 0; i < mpl; i++) {\r\n                    if (maskPart.charAt(i) == opts.optionalmarker.start) {\r\n                        break;\r\n                    }\r\n                }\r\n                var maskParts = [maskPart.substring(0, i)];\r\n                if (i < mpl) {\r\n                    maskParts.push(maskPart.substring(i + 1, mpl));\r\n                }\r\n                return maskParts;\r\n            }\r\n            function generateMask(maskPrefix, maskPart, metadata) {\r\n                var maskParts = splitFirstOptionalEndPart(maskPart);\r\n                var newMask, maskTemplate;\r\n\r\n                var masks = splitFirstOptionalStartPart(maskParts[0]);\r\n                if (masks.length > 1) {\r\n                    newMask = maskPrefix + masks[0] + markOptional(masks[1]) + (maskParts.length > 1 ? maskParts[1] : \"\");\r\n                    if ($.inArray(newMask, genmasks) == -1 && newMask != \"\") {\r\n                        genmasks.push(newMask);\r\n                        maskTemplate = getMaskTemplate(newMask);\r\n                        ms.push({\r\n                            \"mask\": newMask,\r\n                            \"_buffer\": maskTemplate[\"mask\"],\r\n                            \"buffer\": maskTemplate[\"mask\"].slice(),\r\n                            \"tests\": getTestingChain(newMask),\r\n                            \"lastValidPosition\": -1,\r\n                            \"greedy\": maskTemplate[\"greedy\"],\r\n                            \"repeat\": maskTemplate[\"repeat\"],\r\n                            \"metadata\": metadata\r\n                        });\r\n                    }\r\n                    newMask = maskPrefix + masks[0] + (maskParts.length > 1 ? maskParts[1] : \"\");\r\n                    if ($.inArray(newMask, genmasks) == -1 && newMask != \"\") {\r\n                        genmasks.push(newMask);\r\n                        maskTemplate = getMaskTemplate(newMask);\r\n                        ms.push({\r\n                            \"mask\": newMask,\r\n                            \"_buffer\": maskTemplate[\"mask\"],\r\n                            \"buffer\": maskTemplate[\"mask\"].slice(),\r\n                            \"tests\": getTestingChain(newMask),\r\n                            \"lastValidPosition\": -1,\r\n                            \"greedy\": maskTemplate[\"greedy\"],\r\n                            \"repeat\": maskTemplate[\"repeat\"],\r\n                            \"metadata\": metadata\r\n                        });\r\n                    }\r\n                    if (splitFirstOptionalStartPart(masks[1]).length > 1) { //optional contains another optional\r\n                        generateMask(maskPrefix + masks[0], masks[1] + maskParts[1], metadata);\r\n                    }\r\n                    if (maskParts.length > 1 && splitFirstOptionalStartPart(maskParts[1]).length > 1) {\r\n                        generateMask(maskPrefix + masks[0] + markOptional(masks[1]), maskParts[1], metadata);\r\n                        generateMask(maskPrefix + masks[0], maskParts[1], metadata);\r\n                    }\r\n                }\r\n                else {\r\n                    newMask = maskPrefix + maskParts;\r\n                    if ($.inArray(newMask, genmasks) == -1 && newMask != \"\") {\r\n                        genmasks.push(newMask);\r\n                        maskTemplate = getMaskTemplate(newMask);\r\n                        ms.push({\r\n                            \"mask\": newMask,\r\n                            \"_buffer\": maskTemplate[\"mask\"],\r\n                            \"buffer\": maskTemplate[\"mask\"].slice(),\r\n                            \"tests\": getTestingChain(newMask),\r\n                            \"lastValidPosition\": -1,\r\n                            \"greedy\": maskTemplate[\"greedy\"],\r\n                            \"repeat\": maskTemplate[\"repeat\"],\r\n                            \"metadata\": metadata\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            if ($.isFunction(opts.mask)) { //allow mask to be a preprocessing fn - should return a valid mask\r\n                opts.mask = opts.mask.call(this, opts);\r\n            }\r\n            if ($.isArray(opts.mask)) {\r\n                $.each(opts.mask, function (ndx, msk) {\r\n                    if (msk[\"mask\"] != undefined) {\r\n                        generateMask(\"\", msk[\"mask\"].toString(), msk);\r\n                    } else\r\n                        generateMask(\"\", msk.toString());\r\n                });\r\n            } else generateMask(\"\", opts.mask.toString());\r\n\r\n            return opts.greedy ? ms : ms.sort(function (a, b) { return a[\"mask\"].length - b[\"mask\"].length; });\r\n        }\r\n\r\n        var msie10 = navigator.userAgent.match(new RegExp(\"msie 10\", \"i\")) !== null,\r\n            iphone = navigator.userAgent.match(new RegExp(\"iphone\", \"i\")) !== null,\r\n            android = navigator.userAgent.match(new RegExp(\"android.*safari.*\", \"i\")) !== null,\r\n            androidchrome = navigator.userAgent.match(new RegExp(\"android.*chrome.*\", \"i\")) !== null,\r\n            pasteEvent = isInputEventSupported('paste') ? 'paste' : isInputEventSupported('input') ? 'input' : \"propertychange\";\r\n\r\n\r\n        //masking scope\r\n        //actionObj definition see below\r\n        function maskScope(masksets, activeMasksetIndex, opts, actionObj) {\r\n            var isRTL = false,\r\n                valueOnFocus = getActiveBuffer().join(''),\r\n                $el, chromeValueOnInput,\r\n                skipKeyPressEvent = false, //Safari 5.1.x - modal dialog fires keypress twice workaround\r\n                skipInputEvent = false, //skip when triggered from within inputmask\r\n                ignorable = false;\r\n\r\n\r\n            //maskset helperfunctions\r\n\r\n            function getActiveMaskSet() {\r\n                return masksets[activeMasksetIndex];\r\n            }\r\n\r\n            function getActiveTests() {\r\n                return getActiveMaskSet()['tests'];\r\n            }\r\n\r\n            function getActiveBufferTemplate() {\r\n                return getActiveMaskSet()['_buffer'];\r\n            }\r\n\r\n            function getActiveBuffer() {\r\n                return getActiveMaskSet()['buffer'];\r\n            }\r\n\r\n            function isValid(pos, c, strict) { //strict true ~ no correction or autofill\r\n                strict = strict === true; //always set a value to strict to prevent possible strange behavior in the extensions \r\n\r\n                function _isValid(position, activeMaskset, c, strict) {\r\n                    var testPos = determineTestPosition(position), loopend = c ? 1 : 0, chrs = '', buffer = activeMaskset[\"buffer\"];\r\n                    for (var i = activeMaskset['tests'][testPos].cardinality; i > loopend; i--) {\r\n                        chrs += getBufferElement(buffer, testPos - (i - 1));\r\n                    }\r\n\r\n                    if (c) {\r\n                        chrs += c;\r\n                    }\r\n\r\n                    //return is false or a json object => { pos: ??, c: ??} or true\r\n                    return activeMaskset['tests'][testPos].fn != null ?\r\n                        activeMaskset['tests'][testPos].fn.test(chrs, buffer, position, strict, opts)\r\n                        : (c == getBufferElement(activeMaskset['_buffer'], position, true) || c == opts.skipOptionalPartCharacter) ?\r\n                            { \"refresh\": true, c: getBufferElement(activeMaskset['_buffer'], position, true), pos: position }\r\n                            : false;\r\n                }\r\n\r\n                function PostProcessResults(maskForwards, results) {\r\n                    var hasValidActual = false;\r\n                    $.each(results, function (ndx, rslt) {\r\n                        hasValidActual = $.inArray(rslt[\"activeMasksetIndex\"], maskForwards) == -1 && rslt[\"result\"] !== false;\r\n                        if (hasValidActual) return false;\r\n                    });\r\n                    if (hasValidActual) { //strip maskforwards\r\n                        results = $.map(results, function (rslt, ndx) {\r\n                            if ($.inArray(rslt[\"activeMasksetIndex\"], maskForwards) == -1) {\r\n                                return rslt;\r\n                            } else {\r\n                                masksets[rslt[\"activeMasksetIndex\"]][\"lastValidPosition\"] = actualLVP;\r\n                            }\r\n                        });\r\n                    } else { //keep maskforwards with the least forward\r\n                        var lowestPos = -1, lowestIndex = -1, rsltValid;\r\n                        $.each(results, function (ndx, rslt) {\r\n                            if ($.inArray(rslt[\"activeMasksetIndex\"], maskForwards) != -1 && rslt[\"result\"] !== false & (lowestPos == -1 || lowestPos > rslt[\"result\"][\"pos\"])) {\r\n                                lowestPos = rslt[\"result\"][\"pos\"];\r\n                                lowestIndex = rslt[\"activeMasksetIndex\"];\r\n                            }\r\n                        });\r\n                        results = $.map(results, function (rslt, ndx) {\r\n                            if ($.inArray(rslt[\"activeMasksetIndex\"], maskForwards) != -1) {\r\n                                if (rslt[\"result\"][\"pos\"] == lowestPos) {\r\n                                    return rslt;\r\n                                } else if (rslt[\"result\"] !== false) {\r\n                                    for (var i = pos; i < lowestPos; i++) {\r\n                                        rsltValid = _isValid(i, masksets[rslt[\"activeMasksetIndex\"]], masksets[lowestIndex][\"buffer\"][i], true);\r\n                                        if (rsltValid === false) {\r\n                                            masksets[rslt[\"activeMasksetIndex\"]][\"lastValidPosition\"] = lowestPos - 1;\r\n                                            break;\r\n                                        } else {\r\n                                            setBufferElement(masksets[rslt[\"activeMasksetIndex\"]][\"buffer\"], i, masksets[lowestIndex][\"buffer\"][i], true);\r\n                                            masksets[rslt[\"activeMasksetIndex\"]][\"lastValidPosition\"] = i;\r\n                                        }\r\n                                    }\r\n                                    //also check check for the lowestpos with the new input\r\n                                    rsltValid = _isValid(lowestPos, masksets[rslt[\"activeMasksetIndex\"]], c, true);\r\n                                    if (rsltValid !== false) {\r\n                                        setBufferElement(masksets[rslt[\"activeMasksetIndex\"]][\"buffer\"], lowestPos, c, true);\r\n                                        masksets[rslt[\"activeMasksetIndex\"]][\"lastValidPosition\"] = lowestPos;\r\n                                    }\r\n                                    //console.log(\"ndx \" + rslt[\"activeMasksetIndex\"] + \" validate \" + masksets[rslt[\"activeMasksetIndex\"]][\"buffer\"].join('') + \" lv \" + masksets[rslt[\"activeMasksetIndex\"]]['lastValidPosition']);\r\n                                    return rslt;\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    return results;\r\n                }\r\n\r\n                if (strict) {\r\n                    var result = _isValid(pos, getActiveMaskSet(), c, strict); //only check validity in current mask when validating strict\r\n                    if (result === true) {\r\n                        result = { \"pos\": pos }; //always take a possible corrected maskposition into account\r\n                    }\r\n                    return result;\r\n                }\r\n\r\n                var results = [], result = false, currentActiveMasksetIndex = activeMasksetIndex,\r\n                    actualBuffer = getActiveBuffer().slice(), actualLVP = getActiveMaskSet()[\"lastValidPosition\"],\r\n                    actualPrevious = seekPrevious(pos),\r\n                    maskForwards = [];\r\n                $.each(masksets, function (index, value) {\r\n                    if (typeof (value) == \"object\") {\r\n                        activeMasksetIndex = index;\r\n\r\n                        var maskPos = pos;\r\n                        var lvp = getActiveMaskSet()['lastValidPosition'],\r\n                            rsltValid;\r\n                        if (lvp == actualLVP) {\r\n                            if ((maskPos - actualLVP) > 1) {\r\n                                for (var i = lvp == -1 ? 0 : lvp; i < maskPos; i++) {\r\n                                    rsltValid = _isValid(i, getActiveMaskSet(), actualBuffer[i], true);\r\n                                    if (rsltValid === false) {\r\n                                        break;\r\n                                    } else {\r\n                                        setBufferElement(getActiveBuffer(), i, actualBuffer[i], true);\r\n                                        if (rsltValid === true) {\r\n                                            rsltValid = { \"pos\": i }; //always take a possible corrected maskposition into account\r\n                                        }\r\n                                        var newValidPosition = rsltValid.pos || i;\r\n                                        if (getActiveMaskSet()['lastValidPosition'] < newValidPosition)\r\n                                            getActiveMaskSet()['lastValidPosition'] = newValidPosition; //set new position from isValid\r\n                                    }\r\n                                }\r\n                            }\r\n                            //does the input match on a further position?\r\n                            if (!isMask(maskPos) && !_isValid(maskPos, getActiveMaskSet(), c, strict)) {\r\n                                var maxForward = seekNext(maskPos) - maskPos;\r\n                                for (var fw = 0; fw < maxForward; fw++) {\r\n                                    if (_isValid(++maskPos, getActiveMaskSet(), c, strict) !== false)\r\n                                        break;\r\n                                }\r\n                                maskForwards.push(activeMasksetIndex);\r\n                                //console.log('maskforward ' + activeMasksetIndex + \" pos \" + pos + \" maskPos \" + maskPos);\r\n                            }\r\n                        }\r\n\r\n                        if (getActiveMaskSet()['lastValidPosition'] >= actualLVP || activeMasksetIndex == currentActiveMasksetIndex) {\r\n                            if (maskPos >= 0 && maskPos < getMaskLength()) {\r\n                                result = _isValid(maskPos, getActiveMaskSet(), c, strict);\r\n                                if (result !== false) {\r\n                                    if (result === true) {\r\n                                        result = { \"pos\": maskPos }; //always take a possible corrected maskposition into account\r\n                                    }\r\n                                    var newValidPosition = result.pos || maskPos;\r\n                                    if (getActiveMaskSet()['lastValidPosition'] < newValidPosition)\r\n                                        getActiveMaskSet()['lastValidPosition'] = newValidPosition; //set new position from isValid\r\n                                }\r\n                                //console.log(\"pos \" + pos + \" ndx \" + activeMasksetIndex + \" validate \" + getActiveBuffer().join('') + \" lv \" + getActiveMaskSet()['lastValidPosition']);\r\n                                results.push({ \"activeMasksetIndex\": index, \"result\": result });\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                activeMasksetIndex = currentActiveMasksetIndex; //reset activeMasksetIndex\r\n\r\n                return PostProcessResults(maskForwards, results); //return results of the multiple mask validations\r\n            }\r\n\r\n            function determineActiveMasksetIndex() {\r\n                var currentMasksetIndex = activeMasksetIndex,\r\n                    highestValid = { \"activeMasksetIndex\": 0, \"lastValidPosition\": -1, \"next\": -1 };\r\n                $.each(masksets, function (index, value) {\r\n                    if (typeof (value) == \"object\") {\r\n                        activeMasksetIndex = index;\r\n                        if (getActiveMaskSet()['lastValidPosition'] > highestValid['lastValidPosition']) {\r\n                            highestValid[\"activeMasksetIndex\"] = index;\r\n                            highestValid[\"lastValidPosition\"] = getActiveMaskSet()['lastValidPosition'];\r\n                            highestValid[\"next\"] = seekNext(getActiveMaskSet()['lastValidPosition']);\r\n                        } else if (getActiveMaskSet()['lastValidPosition'] == highestValid['lastValidPosition'] &&\r\n                            (highestValid['next'] == -1 || highestValid['next'] > seekNext(getActiveMaskSet()['lastValidPosition']))) {\r\n                            highestValid[\"activeMasksetIndex\"] = index;\r\n                            highestValid[\"lastValidPosition\"] = getActiveMaskSet()['lastValidPosition'];\r\n                            highestValid[\"next\"] = seekNext(getActiveMaskSet()['lastValidPosition']);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                activeMasksetIndex = highestValid[\"lastValidPosition\"] != -1 && masksets[currentMasksetIndex][\"lastValidPosition\"] == highestValid[\"lastValidPosition\"] ? currentMasksetIndex : highestValid[\"activeMasksetIndex\"];\r\n                if (currentMasksetIndex != activeMasksetIndex) {\r\n                    clearBuffer(getActiveBuffer(), seekNext(highestValid[\"lastValidPosition\"]), getMaskLength());\r\n                    getActiveMaskSet()[\"writeOutBuffer\"] = true;\r\n                }\r\n                $el.data('_inputmask')['activeMasksetIndex'] = activeMasksetIndex; //store the activeMasksetIndex\r\n            }\r\n\r\n            function isMask(pos) {\r\n                var testPos = determineTestPosition(pos);\r\n                var test = getActiveTests()[testPos];\r\n\r\n                return test != undefined ? test.fn : false;\r\n            }\r\n\r\n            function determineTestPosition(pos) {\r\n                return pos % getActiveTests().length;\r\n            }\r\n\r\n            function getMaskLength() {\r\n                return opts.getMaskLength(getActiveBufferTemplate(), getActiveMaskSet()['greedy'], getActiveMaskSet()['repeat'], getActiveBuffer(), opts);\r\n            }\r\n\r\n            //pos: from position\r\n\r\n            function seekNext(pos) {\r\n                var maskL = getMaskLength();\r\n                if (pos >= maskL) return maskL;\r\n                var position = pos;\r\n                while (++position < maskL && !isMask(position)) {\r\n                }\r\n                return position;\r\n            }\r\n\r\n            //pos: from position\r\n\r\n            function seekPrevious(pos) {\r\n                var position = pos;\r\n                if (position <= 0) return 0;\r\n\r\n                while (--position > 0 && !isMask(position)) {\r\n                }\r\n                return position;\r\n            }\r\n\r\n            function setBufferElement(buffer, position, element, autoPrepare) {\r\n                if (autoPrepare) position = prepareBuffer(buffer, position);\r\n\r\n                var test = getActiveTests()[determineTestPosition(position)];\r\n                var elem = element;\r\n                if (elem != undefined && test != undefined) {\r\n                    switch (test.casing) {\r\n                        case \"upper\":\r\n                            elem = element.toUpperCase();\r\n                            break;\r\n                        case \"lower\":\r\n                            elem = element.toLowerCase();\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                buffer[position] = elem;\r\n            }\r\n\r\n            function getBufferElement(buffer, position, autoPrepare) {\r\n                if (autoPrepare) position = prepareBuffer(buffer, position);\r\n                return buffer[position];\r\n            }\r\n\r\n            //needed to handle the non-greedy mask repetitions\r\n\r\n            function prepareBuffer(buffer, position) {\r\n                var j;\r\n                while (buffer[position] == undefined && buffer.length < getMaskLength()) {\r\n                    j = 0;\r\n                    while (getActiveBufferTemplate()[j] !== undefined) { //add a new buffer\r\n                        buffer.push(getActiveBufferTemplate()[j++]);\r\n                    }\r\n                }\r\n\r\n                return position;\r\n            }\r\n\r\n            function writeBuffer(input, buffer, caretPos) {\r\n                input._valueSet(buffer.join(''));\r\n                if (caretPos != undefined) {\r\n                    caret(input, caretPos);\r\n                }\r\n            }\r\n\r\n            function clearBuffer(buffer, start, end, stripNomasks) {\r\n                for (var i = start, maskL = getMaskLength() ; i < end && i < maskL; i++) {\r\n                    if (stripNomasks === true) {\r\n                        if (!isMask(i))\r\n                            setBufferElement(buffer, i, \"\");\r\n                    } else\r\n                        setBufferElement(buffer, i, getBufferElement(getActiveBufferTemplate().slice(), i, true));\r\n                }\r\n            }\r\n\r\n            function setReTargetPlaceHolder(buffer, pos) {\r\n                var testPos = determineTestPosition(pos);\r\n                setBufferElement(buffer, pos, getBufferElement(getActiveBufferTemplate(), testPos));\r\n            }\r\n\r\n            function getPlaceHolder(pos) {\r\n                return opts.placeholder.charAt(pos % opts.placeholder.length);\r\n            }\r\n\r\n            function checkVal(input, writeOut, strict, nptvl, intelliCheck) {\r\n                var inputValue = nptvl != undefined ? nptvl.slice() : truncateInput(input._valueGet()).split('');\r\n\r\n                $.each(masksets, function (ndx, ms) {\r\n                    if (typeof (ms) == \"object\") {\r\n                        ms[\"buffer\"] = ms[\"_buffer\"].slice();\r\n                        ms[\"lastValidPosition\"] = -1;\r\n                        ms[\"p\"] = -1;\r\n                    }\r\n                });\r\n                if (strict !== true) activeMasksetIndex = 0;\r\n                if (writeOut) input._valueSet(\"\"); //initial clear\r\n                var ml = getMaskLength();\r\n                $.each(inputValue, function (ndx, charCode) {\r\n                    if (intelliCheck === true) {\r\n                        var p = getActiveMaskSet()[\"p\"], lvp = p == -1 ? p : seekPrevious(p),\r\n                            pos = lvp == -1 ? ndx : seekNext(lvp);\r\n                        if ($.inArray(charCode, getActiveBufferTemplate().slice(lvp + 1, pos)) == -1) {\r\n                            keypressEvent.call(input, undefined, true, charCode.charCodeAt(0), writeOut, strict, ndx);\r\n                        }\r\n                    } else {\r\n                        keypressEvent.call(input, undefined, true, charCode.charCodeAt(0), writeOut, strict, ndx);\r\n                    }\r\n                });\r\n\r\n                if (strict === true && getActiveMaskSet()[\"p\"] != -1) {\r\n                    getActiveMaskSet()[\"lastValidPosition\"] = seekPrevious(getActiveMaskSet()[\"p\"]);\r\n                }\r\n            }\r\n\r\n            function escapeRegex(str) {\r\n                return $.inputmask.escapeRegex.call(this, str);\r\n            }\r\n\r\n            function truncateInput(inputValue) {\r\n                return inputValue.replace(new RegExp(\"(\" + escapeRegex(getActiveBufferTemplate().join('')) + \")*$\"), \"\");\r\n            }\r\n\r\n            function clearOptionalTail(input) {\r\n                var buffer = getActiveBuffer(), tmpBuffer = buffer.slice(), testPos, pos;\r\n                for (var pos = tmpBuffer.length - 1; pos >= 0; pos--) {\r\n                    var testPos = determineTestPosition(pos);\r\n                    if (getActiveTests()[testPos].optionality) {\r\n                        if (!isMask(pos) || !isValid(pos, buffer[pos], true))\r\n                            tmpBuffer.pop();\r\n                        else break;\r\n                    } else break;\r\n                }\r\n                writeBuffer(input, tmpBuffer);\r\n            }\r\n\r\n            function unmaskedvalue($input, skipDatepickerCheck) {\r\n                if (getActiveTests() && (skipDatepickerCheck === true || !$input.hasClass('hasDatepicker'))) {\r\n                    //checkVal(input, false, true);\r\n                    var umValue = $.map(getActiveBuffer(), function (element, index) {\r\n                        return isMask(index) && isValid(index, element, true) ? element : null;\r\n                    });\r\n                    var unmaskedValue = (isRTL ? umValue.reverse() : umValue).join('');\r\n                    return opts.onUnMask != undefined ? opts.onUnMask.call(this, getActiveBuffer().join(''), unmaskedValue) : unmaskedValue;\r\n                } else {\r\n                    return $input[0]._valueGet();\r\n                }\r\n            }\r\n\r\n            function TranslatePosition(pos) {\r\n                if (isRTL && typeof pos == 'number' && (!opts.greedy || opts.placeholder != \"\")) {\r\n                    var bffrLght = getActiveBuffer().length;\r\n                    pos = bffrLght - pos;\r\n                }\r\n                return pos;\r\n            }\r\n\r\n            function caret(input, begin, end) {\r\n                var npt = input.jquery && input.length > 0 ? input[0] : input, range;\r\n                if (typeof begin == 'number') {\r\n                    begin = TranslatePosition(begin);\r\n                    end = TranslatePosition(end);\r\n                    if (!$(input).is(':visible')) {\r\n                        return;\r\n                    }\r\n                    end = (typeof end == 'number') ? end : begin;\r\n                    npt.scrollLeft = npt.scrollWidth;\r\n                    if (opts.insertMode == false && begin == end) end++; //set visualization for insert/overwrite mode\r\n                    if (npt.setSelectionRange) {\r\n                        npt.selectionStart = begin;\r\n                        npt.selectionEnd = android ? begin : end;\r\n\r\n                    } else if (npt.createTextRange) {\r\n                        range = npt.createTextRange();\r\n                        range.collapse(true);\r\n                        range.moveEnd('character', end);\r\n                        range.moveStart('character', begin);\r\n                        range.select();\r\n                    }\r\n                } else {\r\n                    if (!$(input).is(':visible')) {\r\n                        return { \"begin\": 0, \"end\": 0 };\r\n                    }\r\n                    if (npt.setSelectionRange) {\r\n                        begin = npt.selectionStart;\r\n                        end = npt.selectionEnd;\r\n                    } else if (document.selection && document.selection.createRange) {\r\n                        range = document.selection.createRange();\r\n                        begin = 0 - range.duplicate().moveStart('character', -100000);\r\n                        end = begin + range.text.length;\r\n                    }\r\n                    begin = TranslatePosition(begin);\r\n                    end = TranslatePosition(end);\r\n                    return { \"begin\": begin, \"end\": end };\r\n                }\r\n            }\r\n\r\n            function isComplete(buffer) { //return true / false / undefined (repeat *)\r\n                if (opts.repeat == \"*\") return undefined;\r\n                var complete = false, highestValidPosition = 0, currentActiveMasksetIndex = activeMasksetIndex;\r\n                $.each(masksets, function (ndx, ms) {\r\n                    if (typeof (ms) == \"object\") {\r\n                        activeMasksetIndex = ndx;\r\n                        var aml = seekPrevious(getMaskLength());\r\n                        if (ms[\"lastValidPosition\"] >= highestValidPosition && ms[\"lastValidPosition\"] == aml) {\r\n                            var msComplete = true;\r\n                            for (var i = 0; i <= aml; i++) {\r\n                                var mask = isMask(i), testPos = determineTestPosition(i);\r\n                                if ((mask && (buffer[i] == undefined || buffer[i] == getPlaceHolder(i))) || (!mask && buffer[i] != getActiveBufferTemplate()[testPos])) {\r\n                                    msComplete = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            complete = complete || msComplete;\r\n                            if (complete) //break loop\r\n                                return false;\r\n                        }\r\n                        highestValidPosition = ms[\"lastValidPosition\"];\r\n                    }\r\n                });\r\n                activeMasksetIndex = currentActiveMasksetIndex; //reset activeMaskset\r\n                return complete;\r\n            }\r\n\r\n            function isSelection(begin, end) {\r\n                return isRTL ? (begin - end) > 1 || ((begin - end) == 1 && opts.insertMode) :\r\n                    (end - begin) > 1 || ((end - begin) == 1 && opts.insertMode);\r\n            }\r\n\r\n\r\n            //private functions\r\n            function installEventRuler(npt) {\r\n                var events = $._data(npt).events;\r\n\r\n                $.each(events, function (eventType, eventHandlers) {\r\n                    $.each(eventHandlers, function (ndx, eventHandler) {\r\n                        if (eventHandler.namespace == \"inputmask\") {\r\n                            if (eventHandler.type != \"setvalue\") {\r\n                                var handler = eventHandler.handler;\r\n                                eventHandler.handler = function (e) {\r\n                                    if (this.readOnly || this.disabled)\r\n                                        e.preventDefault;\r\n                                    else\r\n                                        return handler.apply(this, arguments);\r\n                                };\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n\r\n            function patchValueProperty(npt) {\r\n                var valueProperty;\r\n                if (Object.getOwnPropertyDescriptor)\r\n                    valueProperty = Object.getOwnPropertyDescriptor(npt, \"value\");\r\n                if (valueProperty && valueProperty.get) {\r\n                    if (!npt._valueGet) {\r\n                        var valueGet = valueProperty.get;\r\n                        var valueSet = valueProperty.set;\r\n                        npt._valueGet = function () {\r\n                            return isRTL ? valueGet.call(this).split('').reverse().join('') : valueGet.call(this);\r\n                        };\r\n                        npt._valueSet = function (value) {\r\n                            valueSet.call(this, isRTL ? value.split('').reverse().join('') : value);\r\n                        };\r\n\r\n                        Object.defineProperty(npt, \"value\", {\r\n                            get: function () {\r\n                                var $self = $(this), inputData = $(this).data('_inputmask'), masksets = inputData['masksets'],\r\n                                    activeMasksetIndex = inputData['activeMasksetIndex'];\r\n                                return inputData && inputData['opts'].autoUnmask ? $self.inputmask('unmaskedvalue') : valueGet.call(this) != masksets[activeMasksetIndex]['_buffer'].join('') ? valueGet.call(this) : '';\r\n                            },\r\n                            set: function (value) {\r\n                                valueSet.call(this, value);\r\n                                $(this).triggerHandler('setvalue.inputmask');\r\n                            }\r\n                        });\r\n                    }\r\n                } else if (document.__lookupGetter__ && npt.__lookupGetter__(\"value\")) {\r\n                    if (!npt._valueGet) {\r\n                        var valueGet = npt.__lookupGetter__(\"value\");\r\n                        var valueSet = npt.__lookupSetter__(\"value\");\r\n                        npt._valueGet = function () {\r\n                            return isRTL ? valueGet.call(this).split('').reverse().join('') : valueGet.call(this);\r\n                        };\r\n                        npt._valueSet = function (value) {\r\n                            valueSet.call(this, isRTL ? value.split('').reverse().join('') : value);\r\n                        };\r\n\r\n                        npt.__defineGetter__(\"value\", function () {\r\n                            var $self = $(this), inputData = $(this).data('_inputmask'), masksets = inputData['masksets'],\r\n                                activeMasksetIndex = inputData['activeMasksetIndex'];\r\n                            return inputData && inputData['opts'].autoUnmask ? $self.inputmask('unmaskedvalue') : valueGet.call(this) != masksets[activeMasksetIndex]['_buffer'].join('') ? valueGet.call(this) : '';\r\n                        });\r\n                        npt.__defineSetter__(\"value\", function (value) {\r\n                            valueSet.call(this, value);\r\n                            $(this).triggerHandler('setvalue.inputmask');\r\n                        });\r\n                    }\r\n                } else {\r\n                    if (!npt._valueGet) {\r\n                        npt._valueGet = function () { return isRTL ? this.value.split('').reverse().join('') : this.value; };\r\n                        npt._valueSet = function (value) { this.value = isRTL ? value.split('').reverse().join('') : value; };\r\n                    }\r\n                    if ($.valHooks.text == undefined || $.valHooks.text.inputmaskpatch != true) {\r\n                        var valueGet = $.valHooks.text && $.valHooks.text.get ? $.valHooks.text.get : function (elem) { return elem.value; };\r\n                        var valueSet = $.valHooks.text && $.valHooks.text.set ? $.valHooks.text.set : function (elem, value) {\r\n                            elem.value = value;\r\n                            return elem;\r\n                        };\r\n\r\n                        jQuery.extend($.valHooks, {\r\n                            text: {\r\n                                get: function (elem) {\r\n                                    var $elem = $(elem);\r\n                                    if ($elem.data('_inputmask')) {\r\n                                        if ($elem.data('_inputmask')['opts'].autoUnmask)\r\n                                            return $elem.inputmask('unmaskedvalue');\r\n                                        else {\r\n                                            var result = valueGet(elem),\r\n                                                inputData = $elem.data('_inputmask'), masksets = inputData['masksets'],\r\n                                                activeMasksetIndex = inputData['activeMasksetIndex'];\r\n                                            return result != masksets[activeMasksetIndex]['_buffer'].join('') ? result : '';\r\n                                        }\r\n                                    } else return valueGet(elem);\r\n                                },\r\n                                set: function (elem, value) {\r\n                                    var $elem = $(elem);\r\n                                    var result = valueSet(elem, value);\r\n                                    if ($elem.data('_inputmask')) $elem.triggerHandler('setvalue.inputmask');\r\n                                    return result;\r\n                                },\r\n                                inputmaskpatch: true\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            //shift chars to left from start to end and put c at end position if defined\r\n\r\n            function shiftL(start, end, c, maskJumps) {\r\n                var buffer = getActiveBuffer();\r\n                if (maskJumps !== false) //jumping over nonmask position\r\n                    while (!isMask(start) && start - 1 >= 0) start--;\r\n                for (var i = start; i < end && i < getMaskLength() ; i++) {\r\n                    if (isMask(i)) {\r\n                        setReTargetPlaceHolder(buffer, i);\r\n                        var j = seekNext(i);\r\n                        var p = getBufferElement(buffer, j);\r\n                        if (p != getPlaceHolder(j)) {\r\n                            if (j < getMaskLength() && isValid(i, p, true) !== false && getActiveTests()[determineTestPosition(i)].def == getActiveTests()[determineTestPosition(j)].def) {\r\n                                setBufferElement(buffer, i, p, true);\r\n                            } else {\r\n                                if (isMask(i))\r\n                                    break;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        setReTargetPlaceHolder(buffer, i);\r\n                    }\r\n                }\r\n                if (c != undefined)\r\n                    setBufferElement(buffer, seekPrevious(end), c);\r\n\r\n                if (getActiveMaskSet()[\"greedy\"] == false) {\r\n                    var trbuffer = truncateInput(buffer.join('')).split('');\r\n                    buffer.length = trbuffer.length;\r\n                    for (var i = 0, bl = buffer.length; i < bl; i++) {\r\n                        buffer[i] = trbuffer[i];\r\n                    }\r\n                    if (buffer.length == 0) getActiveMaskSet()[\"buffer\"] = getActiveBufferTemplate().slice();\r\n                }\r\n                return start; //return the used start position\r\n            }\r\n\r\n            function shiftR(start, end, c) {\r\n                var buffer = getActiveBuffer();\r\n                if (getBufferElement(buffer, start, true) != getPlaceHolder(start)) {\r\n                    for (var i = seekPrevious(end) ; i > start && i >= 0; i--) {\r\n                        if (isMask(i)) {\r\n                            var j = seekPrevious(i);\r\n                            var t = getBufferElement(buffer, j);\r\n                            if (t != getPlaceHolder(j)) {\r\n                                if (isValid(j, t, true) !== false && getActiveTests()[determineTestPosition(i)].def == getActiveTests()[determineTestPosition(j)].def) {\r\n                                    setBufferElement(buffer, i, t, true);\r\n                                    setReTargetPlaceHolder(buffer, j);\r\n                                } //else break;\r\n                            }\r\n                        } else\r\n                            setReTargetPlaceHolder(buffer, i);\r\n                    }\r\n                }\r\n                if (c != undefined && getBufferElement(buffer, start) == getPlaceHolder(start))\r\n                    setBufferElement(buffer, start, c);\r\n                var lengthBefore = buffer.length;\r\n                if (getActiveMaskSet()[\"greedy\"] == false) {\r\n                    var trbuffer = truncateInput(buffer.join('')).split('');\r\n                    buffer.length = trbuffer.length;\r\n                    for (var i = 0, bl = buffer.length; i < bl; i++) {\r\n                        buffer[i] = trbuffer[i];\r\n                    }\r\n                    if (buffer.length == 0) getActiveMaskSet()[\"buffer\"] = getActiveBufferTemplate().slice();\r\n                }\r\n                return end - (lengthBefore - buffer.length); //return new start position\r\n            }\r\n\r\n            function HandleRemove(input, k, pos) {\r\n                if (opts.numericInput || isRTL) {\r\n                    switch (k) {\r\n                        case opts.keyCode.BACKSPACE:\r\n                            k = opts.keyCode.DELETE;\r\n                            break;\r\n                        case opts.keyCode.DELETE:\r\n                            k = opts.keyCode.BACKSPACE;\r\n                            break;\r\n                    }\r\n                    if (isRTL) {\r\n                        var pend = pos.end;\r\n                        pos.end = pos.begin;\r\n                        pos.begin = pend;\r\n                    }\r\n                }\r\n\r\n                var isSelection = true;\r\n                if (pos.begin == pos.end) {\r\n                    var posBegin = k == opts.keyCode.BACKSPACE ? pos.begin - 1 : pos.begin;\r\n                    if (opts.isNumeric && opts.radixPoint != \"\" && getActiveBuffer()[posBegin] == opts.radixPoint) {\r\n                        pos.begin = (getActiveBuffer().length - 1 == posBegin) /* radixPoint is latest? delete it */ ? pos.begin : k == opts.keyCode.BACKSPACE ? posBegin : seekNext(posBegin);\r\n                        pos.end = pos.begin;\r\n                    }\r\n                    isSelection = false;\r\n                    if (k == opts.keyCode.BACKSPACE)\r\n                        pos.begin--;\r\n                    else if (k == opts.keyCode.DELETE)\r\n                        pos.end++;\r\n                } else if (pos.end - pos.begin == 1 && !opts.insertMode) {\r\n                    isSelection = false;\r\n                    if (k == opts.keyCode.BACKSPACE)\r\n                        pos.begin--;\r\n                }\r\n\r\n                clearBuffer(getActiveBuffer(), pos.begin, pos.end);\r\n\r\n                var ml = getMaskLength();\r\n                if (opts.greedy == false) {\r\n                    shiftL(pos.begin, ml, undefined, !isRTL && (k == opts.keyCode.BACKSPACE && !isSelection));\r\n                } else {\r\n                    var newpos = pos.begin;\r\n                    for (var i = pos.begin; i < pos.end; i++) { //seeknext to skip placeholders at start in selection\r\n                        if (isMask(i) || !isSelection)\r\n                            newpos = shiftL(pos.begin, ml, undefined, !isRTL && (k == opts.keyCode.BACKSPACE && !isSelection));\r\n                    }\r\n                    if (!isSelection) pos.begin = newpos;\r\n                }\r\n                var firstMaskPos = seekNext(-1);\r\n                clearBuffer(getActiveBuffer(), pos.begin, pos.end, true);\r\n                checkVal(input, false, masksets[1] == undefined || firstMaskPos >= pos.end, getActiveBuffer());\r\n                if (getActiveMaskSet()['lastValidPosition'] < firstMaskPos) {\r\n                    getActiveMaskSet()[\"lastValidPosition\"] = -1;\r\n                    getActiveMaskSet()[\"p\"] = firstMaskPos;\r\n                } else {\r\n                    getActiveMaskSet()[\"p\"] = pos.begin;\r\n                }\r\n            }\r\n\r\n            function keydownEvent(e) {\r\n                //Safari 5.1.x - modal dialog fires keypress twice workaround\r\n                skipKeyPressEvent = false;\r\n                var input = this, $input = $(input), k = e.keyCode, pos = caret(input);\r\n\r\n                //backspace, delete, and escape get special treatment\r\n                if (k == opts.keyCode.BACKSPACE || k == opts.keyCode.DELETE || (iphone && k == 127) || e.ctrlKey && k == 88) { //backspace/delete\r\n                    e.preventDefault(); //stop default action but allow propagation\r\n                    if (k == 88) valueOnFocus = getActiveBuffer().join('');\r\n                    HandleRemove(input, k, pos);\r\n                    determineActiveMasksetIndex();\r\n                    writeBuffer(input, getActiveBuffer(), getActiveMaskSet()[\"p\"]);\r\n                    if (input._valueGet() == getActiveBufferTemplate().join(''))\r\n                        $input.trigger('cleared');\r\n\r\n                    if (opts.showTooltip) { //update tooltip\r\n                        $input.prop(\"title\", getActiveMaskSet()[\"mask\"]);\r\n                    }\r\n                } else if (k == opts.keyCode.END || k == opts.keyCode.PAGE_DOWN) { //when END or PAGE_DOWN pressed set position at lastmatch\r\n                    setTimeout(function () {\r\n                        var caretPos = seekNext(getActiveMaskSet()[\"lastValidPosition\"]);\r\n                        if (!opts.insertMode && caretPos == getMaskLength() && !e.shiftKey) caretPos--;\r\n                        caret(input, e.shiftKey ? pos.begin : caretPos, caretPos);\r\n                    }, 0);\r\n                } else if ((k == opts.keyCode.HOME && !e.shiftKey) || k == opts.keyCode.PAGE_UP) { //Home or page_up\r\n                    caret(input, 0, e.shiftKey ? pos.begin : 0);\r\n                } else if (k == opts.keyCode.ESCAPE || (k == 90 && e.ctrlKey)) { //escape && undo\r\n                    checkVal(input, true, false, valueOnFocus.split(''));\r\n                    $input.click();\r\n                } else if (k == opts.keyCode.INSERT && !(e.shiftKey || e.ctrlKey)) { //insert\r\n                    opts.insertMode = !opts.insertMode;\r\n                    caret(input, !opts.insertMode && pos.begin == getMaskLength() ? pos.begin - 1 : pos.begin);\r\n                } else if (opts.insertMode == false && !e.shiftKey) {\r\n                    if (k == opts.keyCode.RIGHT) {\r\n                        setTimeout(function () {\r\n                            var caretPos = caret(input);\r\n                            caret(input, caretPos.begin);\r\n                        }, 0);\r\n                    } else if (k == opts.keyCode.LEFT) {\r\n                        setTimeout(function () {\r\n                            var caretPos = caret(input);\r\n                            caret(input, caretPos.begin - 1);\r\n                        }, 0);\r\n                    }\r\n                }\r\n\r\n                var currentCaretPos = caret(input);\r\n                if (opts.onKeyDown.call(this, e, getActiveBuffer(), opts) === true) //extra stuff to execute on keydown\r\n                    caret(input, currentCaretPos.begin, currentCaretPos.end);\r\n                ignorable = $.inArray(k, opts.ignorables) != -1;\r\n            }\r\n\r\n\r\n            function keypressEvent(e, checkval, k, writeOut, strict, ndx) {\r\n                //Safari 5.1.x - modal dialog fires keypress twice workaround\r\n                if (k == undefined && skipKeyPressEvent) return false;\r\n                skipKeyPressEvent = true;\r\n\r\n                var input = this, $input = $(input);\r\n\r\n                e = e || window.event;\r\n                var k = checkval ? k : (e.which || e.charCode || e.keyCode);\r\n\r\n                if (checkval !== true && (!(e.ctrlKey && e.altKey) && (e.ctrlKey || e.metaKey || ignorable))) {\r\n                    return true;\r\n                } else {\r\n                    if (k) {\r\n                        //special treat the decimal separator\r\n                        if (checkval !== true && k == 46 && e.shiftKey == false && opts.radixPoint == \",\") k = 44;\r\n\r\n                        var pos, results, result, c = String.fromCharCode(k);\r\n                        if (checkval) {\r\n                            var pcaret = strict ? ndx : getActiveMaskSet()[\"lastValidPosition\"] + 1;\r\n                            pos = { begin: pcaret, end: pcaret };\r\n                        } else {\r\n                            pos = caret(input);\r\n                        }\r\n\r\n                        //should we clear a possible selection??\r\n                        var isSlctn = isSelection(pos.begin, pos.end), redetermineLVP = false,\r\n                            initialIndex = activeMasksetIndex;\r\n                        if (isSlctn) {\r\n                            activeMasksetIndex = initialIndex;\r\n                            $.each(masksets, function (ndx, lmnt) { //init undobuffer for recovery when not valid\r\n                                if (typeof (lmnt) == \"object\") {\r\n                                    activeMasksetIndex = ndx;\r\n                                    getActiveMaskSet()[\"undoBuffer\"] = getActiveBuffer().join('');\r\n                                }\r\n                            });\r\n                            HandleRemove(input, opts.keyCode.DELETE, pos);\r\n                            if (!opts.insertMode) { //preserve some space\r\n                                $.each(masksets, function (ndx, lmnt) {\r\n                                    if (typeof (lmnt) == \"object\") {\r\n                                        activeMasksetIndex = ndx;\r\n                                        shiftR(pos.begin, getMaskLength());\r\n                                        getActiveMaskSet()[\"lastValidPosition\"] = seekNext(getActiveMaskSet()[\"lastValidPosition\"]);\r\n                                    }\r\n                                });\r\n                            }\r\n                            activeMasksetIndex = initialIndex; //restore index\r\n                        }\r\n\r\n                        var radixPosition = getActiveBuffer().join('').indexOf(opts.radixPoint);\r\n                        if (opts.isNumeric && checkval !== true && radixPosition != -1) {\r\n                            if (opts.greedy && pos.begin <= radixPosition) {\r\n                                pos.begin = seekPrevious(pos.begin);\r\n                                pos.end = pos.begin;\r\n                            } else if (c == opts.radixPoint) {\r\n                                pos.begin = radixPosition;\r\n                                pos.end = pos.begin;\r\n                            }\r\n                        }\r\n\r\n\r\n                        var p = pos.begin;\r\n                        results = isValid(p, c, strict);\r\n                        if (strict === true) results = [{ \"activeMasksetIndex\": activeMasksetIndex, \"result\": results }];\r\n                        var minimalForwardPosition = -1;\r\n                        $.each(results, function (index, result) {\r\n                            activeMasksetIndex = result[\"activeMasksetIndex\"];\r\n                            getActiveMaskSet()[\"writeOutBuffer\"] = true;\r\n                            var np = result[\"result\"];\r\n                            if (np !== false) {\r\n                                var refresh = false, buffer = getActiveBuffer();\r\n                                if (np !== true) {\r\n                                    refresh = np[\"refresh\"]; //only rewrite buffer from isValid\r\n                                    p = np.pos != undefined ? np.pos : p; //set new position from isValid\r\n                                    c = np.c != undefined ? np.c : c; //set new char from isValid\r\n                                }\r\n                                if (refresh !== true) {\r\n                                    if (opts.insertMode == true) {\r\n                                        var lastUnmaskedPosition = getMaskLength();\r\n                                        var bfrClone = buffer.slice();\r\n                                        while (getBufferElement(bfrClone, lastUnmaskedPosition, true) != getPlaceHolder(lastUnmaskedPosition) && lastUnmaskedPosition >= p) {\r\n                                            lastUnmaskedPosition = lastUnmaskedPosition == 0 ? -1 : seekPrevious(lastUnmaskedPosition);\r\n                                        }\r\n                                        if (lastUnmaskedPosition >= p) {\r\n                                            shiftR(p, getMaskLength(), c);\r\n                                            //shift the lvp if needed\r\n                                            var lvp = getActiveMaskSet()[\"lastValidPosition\"], nlvp = seekNext(lvp);\r\n                                            if (nlvp != getMaskLength() && lvp >= p && (getBufferElement(getActiveBuffer(), nlvp, true) != getPlaceHolder(nlvp))) {\r\n                                                getActiveMaskSet()[\"lastValidPosition\"] = nlvp;\r\n                                            }\r\n                                        } else getActiveMaskSet()[\"writeOutBuffer\"] = false;\r\n                                    } else setBufferElement(buffer, p, c, true);\r\n                                    if (minimalForwardPosition == -1 || minimalForwardPosition > seekNext(p)) {\r\n                                        minimalForwardPosition = seekNext(p);\r\n                                    }\r\n                                } else if (!strict) {\r\n                                    var nextPos = p < getMaskLength() ? p + 1 : p;\r\n                                    if (minimalForwardPosition == -1 || minimalForwardPosition > nextPos) {\r\n                                        minimalForwardPosition = nextPos;\r\n                                    }\r\n                                }\r\n                                if (minimalForwardPosition > getActiveMaskSet()[\"p\"])\r\n                                    getActiveMaskSet()[\"p\"] = minimalForwardPosition; //needed for checkval strict \r\n                            }\r\n                        });\r\n\r\n                        if (strict !== true) {\r\n                            activeMasksetIndex = initialIndex;\r\n                            determineActiveMasksetIndex();\r\n                        }\r\n                        if (writeOut !== false) {\r\n                            $.each(results, function (ndx, rslt) {\r\n                                if (rslt[\"activeMasksetIndex\"] == activeMasksetIndex) {\r\n                                    result = rslt;\r\n                                    return false;\r\n                                }\r\n                            });\r\n                            if (result != undefined) {\r\n                                var self = this;\r\n                                setTimeout(function () { opts.onKeyValidation.call(self, result[\"result\"], opts); }, 0);\r\n                                if (getActiveMaskSet()[\"writeOutBuffer\"] && result[\"result\"] !== false) {\r\n                                    var buffer = getActiveBuffer();\r\n\r\n                                    var newCaretPosition;\r\n                                    if (checkval) {\r\n                                        newCaretPosition = undefined;\r\n                                    } else if (opts.numericInput) {\r\n                                        if (p > radixPosition) {\r\n                                            newCaretPosition = seekPrevious(minimalForwardPosition);\r\n                                        } else if (c == opts.radixPoint) {\r\n                                            newCaretPosition = minimalForwardPosition - 1;\r\n                                        } else newCaretPosition = seekPrevious(minimalForwardPosition - 1);\r\n                                    } else {\r\n                                        newCaretPosition = minimalForwardPosition;\r\n                                    }\r\n\r\n                                    writeBuffer(input, buffer, newCaretPosition);\r\n                                    if (checkval !== true) {\r\n                                        setTimeout(function () { //timeout needed for IE\r\n                                            if (isComplete(buffer) === true)\r\n                                                $input.trigger(\"complete\");\r\n                                            skipInputEvent = true;\r\n                                            $input.trigger(\"input\");\r\n                                        }, 0);\r\n                                    }\r\n                                } else if (isSlctn) {\r\n                                    getActiveMaskSet()[\"buffer\"] = getActiveMaskSet()[\"undoBuffer\"].split('');\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (opts.showTooltip) { //update tooltip\r\n                            $input.prop(\"title\", getActiveMaskSet()[\"mask\"]);\r\n                        }\r\n\r\n                        //needed for IE8 and below\r\n                        if (e) e.preventDefault ? e.preventDefault() : e.returnValue = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function keyupEvent(e) {\r\n                var $input = $(this), input = this, k = e.keyCode, buffer = getActiveBuffer();\r\n\r\n                if (androidchrome && k == opts.keyCode.BACKSPACE) {\r\n                    if (chromeValueOnInput == input._valueGet())\r\n                        keydownEvent.call(this, e);\r\n                }\r\n\r\n                opts.onKeyUp.call(this, e, buffer, opts); //extra stuff to execute on keyup\r\n                if (k == opts.keyCode.TAB && opts.showMaskOnFocus) {\r\n                    if ($input.hasClass('focus.inputmask') && input._valueGet().length == 0) {\r\n                        buffer = getActiveBufferTemplate().slice();\r\n                        writeBuffer(input, buffer);\r\n                        caret(input, 0);\r\n                        valueOnFocus = getActiveBuffer().join('');\r\n                    } else {\r\n                        writeBuffer(input, buffer);\r\n                        if (buffer.join('') == getActiveBufferTemplate().join('') && $.inArray(opts.radixPoint, buffer) != -1) {\r\n                            caret(input, TranslatePosition(0));\r\n                            $input.click();\r\n                        } else\r\n                            caret(input, TranslatePosition(0), TranslatePosition(getMaskLength()));\r\n                    }\r\n                }\r\n            }\r\n\r\n            function inputEvent(e) {\r\n                if (skipInputEvent === true) {\r\n                    skipInputEvent = false;\r\n                    return true;\r\n                }\r\n                var input = this, $input = $(input);\r\n\r\n                chromeValueOnInput = getActiveBuffer().join('');\r\n                checkVal(input, false, false);\r\n                writeBuffer(input, getActiveBuffer());\r\n                if (isComplete(getActiveBuffer()) === true)\r\n                    $input.trigger(\"complete\");\r\n                $input.click();\r\n            }\r\n\r\n            function mask(el) {\r\n                $el = $(el);\r\n                if ($el.is(\":input\")) {\r\n                    //store tests & original buffer in the input element - used to get the unmasked value\r\n                    $el.data('_inputmask', {\r\n                        'masksets': masksets,\r\n                        'activeMasksetIndex': activeMasksetIndex,\r\n                        'opts': opts,\r\n                        'isRTL': false\r\n                    });\r\n\r\n                    //show tooltip\r\n                    if (opts.showTooltip) {\r\n                        $el.prop(\"title\", getActiveMaskSet()[\"mask\"]);\r\n                    }\r\n\r\n                    //correct greedy setting if needed\r\n                    getActiveMaskSet()['greedy'] = getActiveMaskSet()['greedy'] ? getActiveMaskSet()['greedy'] : getActiveMaskSet()['repeat'] == 0;\r\n\r\n                    //handle maxlength attribute\r\n                    if ($el.attr(\"maxLength\") != null) //only when the attribute is set\r\n                    {\r\n                        var maxLength = $el.prop('maxLength');\r\n                        if (maxLength > -1) { //handle *-repeat\r\n                            $.each(masksets, function (ndx, ms) {\r\n                                if (typeof (ms) == \"object\") {\r\n                                    if (ms[\"repeat\"] == \"*\") {\r\n                                        ms[\"repeat\"] = maxLength;\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n                        if (getMaskLength() >= maxLength && maxLength > -1) { //FF sets no defined max length to -1 \r\n                            if (maxLength < getActiveBufferTemplate().length) getActiveBufferTemplate().length = maxLength;\r\n                            if (getActiveMaskSet()['greedy'] == false) {\r\n                                getActiveMaskSet()['repeat'] = Math.round(maxLength / getActiveBufferTemplate().length);\r\n                            }\r\n                            $el.prop('maxLength', getMaskLength() * 2);\r\n                        }\r\n                    }\r\n\r\n                    patchValueProperty(el);\r\n\r\n                    if (opts.numericInput) opts.isNumeric = opts.numericInput;\r\n                    if (el.dir == \"rtl\" || (opts.numericInput && opts.rightAlignNumerics) || (opts.isNumeric && opts.rightAlignNumerics))\r\n                        $el.css(\"text-align\", \"right\");\r\n\r\n                    if (el.dir == \"rtl\" || opts.numericInput) {\r\n                        el.dir = \"ltr\";\r\n                        $el.removeAttr(\"dir\");\r\n                        var inputData = $el.data('_inputmask');\r\n                        inputData['isRTL'] = true;\r\n                        $el.data('_inputmask', inputData);\r\n                        isRTL = true;\r\n                    }\r\n\r\n                    //unbind all events - to make sure that no other mask will interfere when re-masking\r\n                    $el.unbind(\".inputmask\");\r\n                    $el.removeClass('focus.inputmask');\r\n                    //bind events\r\n                    $el.closest('form').bind(\"submit\", function () { //trigger change on submit if any\r\n                        if (valueOnFocus != getActiveBuffer().join('')) {\r\n                            $el.change();\r\n                        }\r\n                    }).bind('reset', function () {\r\n                        setTimeout(function () {\r\n                            $el.trigger(\"setvalue\");\r\n                        }, 0);\r\n                    });\r\n                    $el.bind(\"mouseenter.inputmask\", function () {\r\n                        var $input = $(this), input = this;\r\n                        if (!$input.hasClass('focus.inputmask') && opts.showMaskOnHover) {\r\n                            if (input._valueGet() != getActiveBuffer().join('')) {\r\n                                writeBuffer(input, getActiveBuffer());\r\n                            }\r\n                        }\r\n                    }).bind(\"blur.inputmask\", function () {\r\n                        var $input = $(this), input = this, nptValue = input._valueGet(), buffer = getActiveBuffer();\r\n                        $input.removeClass('focus.inputmask');\r\n                        if (valueOnFocus != getActiveBuffer().join('')) {\r\n                            $input.change();\r\n                        }\r\n                        if (opts.clearMaskOnLostFocus && nptValue != '') {\r\n                            if (nptValue == getActiveBufferTemplate().join(''))\r\n                                input._valueSet('');\r\n                            else { //clearout optional tail of the mask\r\n                                clearOptionalTail(input);\r\n                            }\r\n                        }\r\n                        if (isComplete(buffer) === false) {\r\n                            $input.trigger(\"incomplete\");\r\n                            if (opts.clearIncomplete) {\r\n                                $.each(masksets, function (ndx, ms) {\r\n                                    if (typeof (ms) == \"object\") {\r\n                                        ms[\"buffer\"] = ms[\"_buffer\"].slice();\r\n                                        ms[\"lastValidPosition\"] = -1;\r\n                                    }\r\n                                });\r\n                                activeMasksetIndex = 0;\r\n                                if (opts.clearMaskOnLostFocus)\r\n                                    input._valueSet('');\r\n                                else {\r\n                                    buffer = getActiveBufferTemplate().slice();\r\n                                    writeBuffer(input, buffer);\r\n                                }\r\n                            }\r\n                        }\r\n                    }).bind(\"focus.inputmask\", function () {\r\n                        var $input = $(this), input = this, nptValue = input._valueGet();\r\n                        if (opts.showMaskOnFocus && !$input.hasClass('focus.inputmask') && (!opts.showMaskOnHover || (opts.showMaskOnHover && nptValue == ''))) {\r\n                            if (input._valueGet() != getActiveBuffer().join('')) {\r\n                                writeBuffer(input, getActiveBuffer(), seekNext(getActiveMaskSet()[\"lastValidPosition\"]));\r\n                            }\r\n                        }\r\n                        $input.addClass('focus.inputmask');\r\n                        valueOnFocus = getActiveBuffer().join('');\r\n                    }).bind(\"mouseleave.inputmask\", function () {\r\n                        var $input = $(this), input = this;\r\n                        if (opts.clearMaskOnLostFocus) {\r\n                            if (!$input.hasClass('focus.inputmask') && input._valueGet() != $input.attr(\"placeholder\")) {\r\n                                if (input._valueGet() == getActiveBufferTemplate().join('') || input._valueGet() == '')\r\n                                    input._valueSet('');\r\n                                else { //clearout optional tail of the mask\r\n                                    clearOptionalTail(input);\r\n                                }\r\n                            }\r\n                        }\r\n                    }).bind(\"click.inputmask\", function () {\r\n                        var input = this;\r\n                        setTimeout(function () {\r\n                            var selectedCaret = caret(input), buffer = getActiveBuffer();\r\n                            if (selectedCaret.begin == selectedCaret.end) {\r\n                                var clickPosition = isRTL ? TranslatePosition(selectedCaret.begin) : selectedCaret.begin,\r\n                                    lvp = getActiveMaskSet()[\"lastValidPosition\"],\r\n                                    lastPosition;\r\n                                if (opts.isNumeric) {\r\n                                    lastPosition = opts.skipRadixDance === false && opts.radixPoint != \"\" && $.inArray(opts.radixPoint, buffer) != -1 ?\r\n                                        (opts.numericInput ? seekNext($.inArray(opts.radixPoint, buffer)) : $.inArray(opts.radixPoint, buffer)) :\r\n                                        seekNext(lvp);\r\n                                } else {\r\n                                    lastPosition = seekNext(lvp);\r\n                                }\r\n                                if (clickPosition < lastPosition) {\r\n                                    if (isMask(clickPosition))\r\n                                        caret(input, clickPosition);\r\n                                    else caret(input, seekNext(clickPosition));\r\n                                } else\r\n                                    caret(input, lastPosition);\r\n                            }\r\n                        }, 0);\r\n                    }).bind('dblclick.inputmask', function () {\r\n                        var input = this;\r\n                        setTimeout(function () {\r\n                            caret(input, 0, seekNext(getActiveMaskSet()[\"lastValidPosition\"]));\r\n                        }, 0);\r\n                    }).bind(pasteEvent + \".inputmask dragdrop.inputmask drop.inputmask\", function (e) {\r\n                        if (skipInputEvent === true) {\r\n                            skipInputEvent = false;\r\n                            return true;\r\n                        }\r\n                        var input = this, $input = $(input);\r\n\r\n                        //paste event for IE8 and lower I guess ;-)\r\n                        if (e.type == \"propertychange\" && input._valueGet().length <= getMaskLength()) {\r\n                            return true;\r\n                        }\r\n                        setTimeout(function () {\r\n                            var pasteValue = opts.onBeforePaste != undefined ? opts.onBeforePaste.call(this, input._valueGet()) : input._valueGet();\r\n                            checkVal(input, true, false, pasteValue.split(''), true);\r\n                            if (isComplete(getActiveBuffer()) === true)\r\n                                $input.trigger(\"complete\");\r\n                            $input.click();\r\n                        }, 0);\r\n                    }).bind('setvalue.inputmask', function () {\r\n                        var input = this;\r\n                        checkVal(input, true);\r\n                        valueOnFocus = getActiveBuffer().join('');\r\n                        if (input._valueGet() == getActiveBufferTemplate().join(''))\r\n                            input._valueSet('');\r\n                    }).bind('complete.inputmask', opts.oncomplete\r\n                    ).bind('incomplete.inputmask', opts.onincomplete\r\n                    ).bind('cleared.inputmask', opts.oncleared\r\n                    ).bind(\"keyup.inputmask\", keyupEvent);\r\n\r\n                    if (androidchrome) {\r\n                        $el.bind(\"input.inputmask\", inputEvent);\r\n                    } else {\r\n                        $el.bind(\"keydown.inputmask\", keydownEvent\r\n                        ).bind(\"keypress.inputmask\", keypressEvent);\r\n                    }\r\n\r\n                    if (msie10)\r\n                        $el.bind(\"input.inputmask\", inputEvent);\r\n\r\n                    //apply mask\r\n                    checkVal(el, true, false);\r\n                    valueOnFocus = getActiveBuffer().join('');\r\n                    // Wrap document.activeElement in a try/catch block since IE9 throw \"Unspecified error\" if document.activeElement is undefined when we are in an IFrame.\r\n                    var activeElement;\r\n                    try {\r\n                        activeElement = document.activeElement;\r\n                    } catch (e) {\r\n                    }\r\n                    if (activeElement === el) { //position the caret when in focus\r\n                        $el.addClass('focus.inputmask');\r\n                        caret(el, seekNext(getActiveMaskSet()[\"lastValidPosition\"]));\r\n                    } else if (opts.clearMaskOnLostFocus) {\r\n                        if (getActiveBuffer().join('') == getActiveBufferTemplate().join('')) {\r\n                            el._valueSet('');\r\n                        } else {\r\n                            clearOptionalTail(el);\r\n                        }\r\n                    } else {\r\n                        writeBuffer(el, getActiveBuffer());\r\n                    }\r\n\r\n                    installEventRuler(el);\r\n                }\r\n            }\r\n\r\n            //action object\r\n            if (actionObj != undefined) {\r\n                switch (actionObj[\"action\"]) {\r\n                    case \"isComplete\":\r\n                        return isComplete(actionObj[\"buffer\"]);\r\n                    case \"unmaskedvalue\":\r\n                        isRTL = actionObj[\"$input\"].data('_inputmask')['isRTL'];\r\n                        return unmaskedvalue(actionObj[\"$input\"], actionObj[\"skipDatepickerCheck\"]);\r\n                    case \"mask\":\r\n                        mask(actionObj[\"el\"]);\r\n                        break;\r\n                    case \"format\":\r\n                        $el = $({});\r\n                        $el.data('_inputmask', {\r\n                            'masksets': masksets,\r\n                            'activeMasksetIndex': activeMasksetIndex,\r\n                            'opts': opts,\r\n                            'isRTL': opts.numericInput\r\n                        });\r\n                        if (opts.numericInput) {\r\n                            opts.isNumeric = opts.numericInput;\r\n                            isRTL = true;\r\n                        }\r\n\r\n                        checkVal($el, false, false, actionObj[\"value\"].split(''), true);\r\n                        return getActiveBuffer().join('');\r\n                }\r\n            }\r\n        }\r\n        $.inputmask = {\r\n            //options default\r\n            defaults: {\r\n                placeholder: \"_\",\r\n                optionalmarker: { start: \"[\", end: \"]\" },\r\n                quantifiermarker: { start: \"{\", end: \"}\" },\r\n                groupmarker: { start: \"(\", end: \")\" },\r\n                escapeChar: \"\\\\\",\r\n                mask: null,\r\n                oncomplete: $.noop, //executes when the mask is complete\r\n                onincomplete: $.noop, //executes when the mask is incomplete and focus is lost\r\n                oncleared: $.noop, //executes when the mask is cleared\r\n                repeat: 0, //repetitions of the mask: * ~ forever, otherwise specify an integer\r\n                greedy: true, //true: allocated buffer for the mask and repetitions - false: allocate only if needed\r\n                autoUnmask: false, //automatically unmask when retrieving the value with $.fn.val or value if the browser supports __lookupGetter__ or getOwnPropertyDescriptor\r\n                clearMaskOnLostFocus: true,\r\n                insertMode: true, //insert the input or overwrite the input\r\n                clearIncomplete: false, //clear the incomplete input on blur\r\n                aliases: {}, //aliases definitions => see jquery.inputmask.extensions.js\r\n                onKeyUp: $.noop, //override to implement autocomplete on certain keys for example\r\n                onKeyDown: $.noop, //override to implement autocomplete on certain keys for example\r\n                onBeforePaste: undefined, //executes before masking the pasted value to allow preprocessing of the pasted value.  args => pastedValue => return processedValue\r\n                onUnMask: undefined, //executes after unmasking to allow postprocessing of the unmaskedvalue.  args => maskedValue, unmaskedValue\r\n                showMaskOnFocus: true, //show the mask-placeholder when the input has focus\r\n                showMaskOnHover: true, //show the mask-placeholder when hovering the empty input\r\n                onKeyValidation: $.noop, //executes on every key-press with the result of isValid. Params: result, opts\r\n                skipOptionalPartCharacter: \" \", //a character which can be used to skip an optional part of a mask\r\n                showTooltip: false, //show the activemask as tooltip\r\n                numericInput: false, //numericInput input direction style (input shifts to the left while holding the caret position)\r\n                //numeric basic properties\r\n                isNumeric: false, //enable numeric features\r\n                radixPoint: \"\", //\".\", // | \",\"\r\n                skipRadixDance: false, //disable radixpoint caret positioning\r\n                rightAlignNumerics: true, //align numerics to the right\r\n                //numeric basic properties\r\n                definitions: {\r\n                    '9': {\r\n                        validator: \"[0-9]\",\r\n                        cardinality: 1\r\n                    },\r\n                    'a': {\r\n                        validator: \"[A-Za-z\\u0410-\\u044F\\u0401\\u0451]\",\r\n                        cardinality: 1\r\n                    },\r\n                    '*': {\r\n                        validator: \"[A-Za-z\\u0410-\\u044F\\u0401\\u04510-9]\",\r\n                        cardinality: 1\r\n                    }\r\n                },\r\n                keyCode: {\r\n                    ALT: 18, BACKSPACE: 8, CAPS_LOCK: 20, COMMA: 188, COMMAND: 91, COMMAND_LEFT: 91, COMMAND_RIGHT: 93, CONTROL: 17, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, INSERT: 45, LEFT: 37, MENU: 93, NUMPAD_ADD: 107, NUMPAD_DECIMAL: 110, NUMPAD_DIVIDE: 111, NUMPAD_ENTER: 108,\r\n                    NUMPAD_MULTIPLY: 106, NUMPAD_SUBTRACT: 109, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SHIFT: 16, SPACE: 32, TAB: 9, UP: 38, WINDOWS: 91\r\n                },\r\n                //specify keycodes which should not be considered in the keypress event, otherwise the preventDefault will stop their default behavior especially in FF\r\n                ignorables: [8, 9, 13, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123],\r\n                getMaskLength: function (buffer, greedy, repeat, currentBuffer, opts) {\r\n                    var calculatedLength = buffer.length;\r\n                    if (!greedy) {\r\n                        if (repeat == \"*\") {\r\n                            calculatedLength = currentBuffer.length + 1;\r\n                        } else if (repeat > 1) {\r\n                            calculatedLength += (buffer.length * (repeat - 1));\r\n                        }\r\n                    }\r\n                    return calculatedLength;\r\n                }\r\n            },\r\n            escapeRegex: function (str) {\r\n                var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\'];\r\n                return str.replace(new RegExp('(\\\\' + specials.join('|\\\\') + ')', 'gim'), '\\\\$1');\r\n            },\r\n            format: function (value, options) {\r\n                var opts = $.extend(true, {}, $.inputmask.defaults, options);\r\n                resolveAlias(opts.alias, options, opts);\r\n                return maskScope(generateMaskSets(opts), 0, opts, { \"action\": \"format\", \"value\": value });\r\n            }\r\n        };\r\n\r\n        $.fn.inputmask = function (fn, options) {\r\n            var opts = $.extend(true, {}, $.inputmask.defaults, options),\r\n                masksets,\r\n                activeMasksetIndex = 0;\r\n\r\n            if (typeof fn === \"string\") {\r\n                switch (fn) {\r\n                    case \"mask\":\r\n                        //resolve possible aliases given by options\r\n                        resolveAlias(opts.alias, options, opts);\r\n                        masksets = generateMaskSets(opts);\r\n                        if (masksets.length == 0) { return this; }\r\n\r\n                        return this.each(function () {\r\n                            maskScope($.extend(true, {}, masksets), 0, opts, { \"action\": \"mask\", \"el\": this });\r\n                        });\r\n                    case \"unmaskedvalue\":\r\n                        var $input = $(this), input = this;\r\n                        if ($input.data('_inputmask')) {\r\n                            masksets = $input.data('_inputmask')['masksets'];\r\n                            activeMasksetIndex = $input.data('_inputmask')['activeMasksetIndex'];\r\n                            opts = $input.data('_inputmask')['opts'];\r\n                            return maskScope(masksets, activeMasksetIndex, opts, { \"action\": \"unmaskedvalue\", \"$input\": $input });\r\n                        } else return $input.val();\r\n                    case \"remove\":\r\n                        return this.each(function () {\r\n                            var $input = $(this), input = this;\r\n                            if ($input.data('_inputmask')) {\r\n                                masksets = $input.data('_inputmask')['masksets'];\r\n                                activeMasksetIndex = $input.data('_inputmask')['activeMasksetIndex'];\r\n                                opts = $input.data('_inputmask')['opts'];\r\n                                //writeout the unmaskedvalue\r\n                                input._valueSet(maskScope(masksets, activeMasksetIndex, opts, { \"action\": \"unmaskedvalue\", \"$input\": $input, \"skipDatepickerCheck\": true }));\r\n                                //clear data\r\n                                $input.removeData('_inputmask');\r\n                                //unbind all events\r\n                                $input.unbind(\".inputmask\");\r\n                                $input.removeClass('focus.inputmask');\r\n                                //restore the value property\r\n                                var valueProperty;\r\n                                if (Object.getOwnPropertyDescriptor)\r\n                                    valueProperty = Object.getOwnPropertyDescriptor(input, \"value\");\r\n                                if (valueProperty && valueProperty.get) {\r\n                                    if (input._valueGet) {\r\n                                        Object.defineProperty(input, \"value\", {\r\n                                            get: input._valueGet,\r\n                                            set: input._valueSet\r\n                                        });\r\n                                    }\r\n                                } else if (document.__lookupGetter__ && input.__lookupGetter__(\"value\")) {\r\n                                    if (input._valueGet) {\r\n                                        input.__defineGetter__(\"value\", input._valueGet);\r\n                                        input.__defineSetter__(\"value\", input._valueSet);\r\n                                    }\r\n                                }\r\n                                try { //try catch needed for IE7 as it does not supports deleting fns\r\n                                    delete input._valueGet;\r\n                                    delete input._valueSet;\r\n                                } catch (e) {\r\n                                    input._valueGet = undefined;\r\n                                    input._valueSet = undefined;\r\n\r\n                                }\r\n                            }\r\n                        });\r\n                        break;\r\n                    case \"getemptymask\": //return the default (empty) mask value, usefull for setting the default value in validation\r\n                        if (this.data('_inputmask')) {\r\n                            masksets = this.data('_inputmask')['masksets'];\r\n                            activeMasksetIndex = this.data('_inputmask')['activeMasksetIndex'];\r\n                            return masksets[activeMasksetIndex]['_buffer'].join('');\r\n                        }\r\n                        else return \"\";\r\n                    case \"hasMaskedValue\": //check wheter the returned value is masked or not; currently only works reliable when using jquery.val fn to retrieve the value \r\n                        return this.data('_inputmask') ? !this.data('_inputmask')['opts'].autoUnmask : false;\r\n                    case \"isComplete\":\r\n                        masksets = this.data('_inputmask')['masksets'];\r\n                        activeMasksetIndex = this.data('_inputmask')['activeMasksetIndex'];\r\n                        opts = this.data('_inputmask')['opts'];\r\n                        return maskScope(masksets, activeMasksetIndex, opts, { \"action\": \"isComplete\", \"buffer\": this[0]._valueGet().split('') });\r\n                    case \"getmetadata\": //return mask metadata if exists\r\n                        if (this.data('_inputmask')) {\r\n                            masksets = this.data('_inputmask')['masksets'];\r\n                            activeMasksetIndex = this.data('_inputmask')['activeMasksetIndex'];\r\n                            return masksets[activeMasksetIndex]['metadata'];\r\n                        }\r\n                        else return undefined;\r\n                    default:\r\n                        //check if the fn is an alias\r\n                        if (!resolveAlias(fn, options, opts)) {\r\n                            //maybe fn is a mask so we try\r\n                            //set mask\r\n                            opts.mask = fn;\r\n                        }\r\n                        masksets = generateMaskSets(opts);\r\n                        if (masksets.length == 0) { return this; }\r\n                        return this.each(function () {\r\n                            maskScope($.extend(true, {}, masksets), activeMasksetIndex, opts, { \"action\": \"mask\", \"el\": this });\r\n                        });\r\n\r\n                        break;\r\n                }\r\n            } else if (typeof fn == \"object\") {\r\n                opts = $.extend(true, {}, $.inputmask.defaults, fn);\r\n\r\n                resolveAlias(opts.alias, fn, opts); //resolve aliases\r\n                masksets = generateMaskSets(opts);\r\n                if (masksets.length == 0) { return this; }\r\n                return this.each(function () {\r\n                    maskScope($.extend(true, {}, masksets), activeMasksetIndex, opts, { \"action\": \"mask\", \"el\": this });\r\n                });\r\n            } else if (fn == undefined) {\r\n                //look for data-inputmask atribute - the attribute should only contain optipns\r\n                return this.each(function () {\r\n                    var attrOptions = $(this).attr(\"data-inputmask\");\r\n                    if (attrOptions && attrOptions != \"\") {\r\n                        try {\r\n                            attrOptions = attrOptions.replace(new RegExp(\"'\", \"g\"), '\"');\r\n                            var dataoptions = $.parseJSON(\"{\" + attrOptions + \"}\");\r\n                            $.extend(true, dataoptions, options);\r\n                            opts = $.extend(true, {}, $.inputmask.defaults, dataoptions);\r\n                            resolveAlias(opts.alias, dataoptions, opts);\r\n                            opts.alias = undefined;\r\n                            $(this).inputmask(opts);\r\n                        } catch (ex) { } //need a more relax parseJSON\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n})(jQuery);\r\n","/*\r\nInput Mask plugin extensions\r\nhttp://github.com/RobinHerbots/jquery.inputmask\r\nCopyright (c) 2010 - 2014 Robin Herbots\r\nLicensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\r\nVersion: 0.0.0\r\n\r\nOptional extensions on the jquery.inputmask base\r\n*/\r\n(function ($) {\r\n    //date & time aliases\r\n    $.extend($.inputmask.defaults.definitions, {\r\n        'h': { //hours\r\n            validator: \"[01][0-9]|2[0-3]\",\r\n            cardinality: 2,\r\n            prevalidator: [{ validator: \"[0-2]\", cardinality: 1 }]\r\n        },\r\n        's': { //seconds || minutes\r\n            validator: \"[0-5][0-9]\",\r\n            cardinality: 2,\r\n            prevalidator: [{ validator: \"[0-5]\", cardinality: 1 }]\r\n        },\r\n        'd': { //basic day\r\n            validator: \"0[1-9]|[12][0-9]|3[01]\",\r\n            cardinality: 2,\r\n            prevalidator: [{ validator: \"[0-3]\", cardinality: 1 }]\r\n        },\r\n        'm': { //basic month\r\n            validator: \"0[1-9]|1[012]\",\r\n            cardinality: 2,\r\n            prevalidator: [{ validator: \"[01]\", cardinality: 1 }]\r\n        },\r\n        'y': { //basic year\r\n            validator: \"(19|20)\\\\d{2}\",\r\n            cardinality: 4,\r\n            prevalidator: [\r\n                        { validator: \"[12]\", cardinality: 1 },\r\n                        { validator: \"(19|20)\", cardinality: 2 },\r\n                        { validator: \"(19|20)\\\\d\", cardinality: 3 }\r\n            ]\r\n        }\r\n    });\r\n    $.extend($.inputmask.defaults.aliases, {\r\n        'dd/mm/yyyy': {\r\n            mask: \"1/2/y\",\r\n            placeholder: \"dd/mm/yyyy\",\r\n            regex: {\r\n                val1pre: new RegExp(\"[0-3]\"), //daypre\r\n                val1: new RegExp(\"0[1-9]|[12][0-9]|3[01]\"), //day\r\n                val2pre: function (separator) { var escapedSeparator = $.inputmask.escapeRegex.call(this, separator); return new RegExp(\"((0[1-9]|[12][0-9]|3[01])\" + escapedSeparator + \"[01])\"); }, //monthpre\r\n                val2: function (separator) { var escapedSeparator = $.inputmask.escapeRegex.call(this, separator); return new RegExp(\"((0[1-9]|[12][0-9])\" + escapedSeparator + \"(0[1-9]|1[012]))|(30\" + escapedSeparator + \"(0[13-9]|1[012]))|(31\" + escapedSeparator + \"(0[13578]|1[02]))\"); }//month\r\n            },\r\n            leapday: \"29/02/\",\r\n            separator: '/',\r\n            yearrange: { minyear: 1900, maxyear: 2099 },\r\n            isInYearRange: function (chrs, minyear, maxyear) {\r\n                var enteredyear = parseInt(chrs.concat(minyear.toString().slice(chrs.length)));\r\n                var enteredyear2 = parseInt(chrs.concat(maxyear.toString().slice(chrs.length)));\r\n                return (enteredyear != NaN ? minyear <= enteredyear && enteredyear <= maxyear : false) ||\r\n            \t\t   (enteredyear2 != NaN ? minyear <= enteredyear2 && enteredyear2 <= maxyear : false);\r\n            },\r\n            determinebaseyear: function (minyear, maxyear, hint) {\r\n                var currentyear = (new Date()).getFullYear();\r\n                if (minyear > currentyear) return minyear;\r\n                if (maxyear < currentyear) {\r\n                    var maxYearPrefix = maxyear.toString().slice(0, 2);\r\n                    var maxYearPostfix = maxyear.toString().slice(2, 4);\r\n                    while (maxyear < maxYearPrefix + hint) {\r\n                        maxYearPrefix--;\r\n                    }\r\n                    var maxxYear = maxYearPrefix + maxYearPostfix;\r\n                    return minyear > maxxYear ? minyear : maxxYear;\r\n                }\r\n\r\n                return currentyear;\r\n            },\r\n            onKeyUp: function (e, buffer, opts) {\r\n                var $input = $(this);\r\n                if (e.ctrlKey && e.keyCode == opts.keyCode.RIGHT) {\r\n                    var today = new Date();\r\n                    $input.val(today.getDate().toString() + (today.getMonth() + 1).toString() + today.getFullYear().toString());\r\n                }\r\n            },\r\n            definitions: {\r\n                '1': { //val1 ~ day or month\r\n                    validator: function (chrs, buffer, pos, strict, opts) {\r\n                        var isValid = opts.regex.val1.test(chrs);\r\n                        if (!strict && !isValid) {\r\n                            if (chrs.charAt(1) == opts.separator || \"-./\".indexOf(chrs.charAt(1)) != -1) {\r\n                                isValid = opts.regex.val1.test(\"0\" + chrs.charAt(0));\r\n                                if (isValid) {\r\n                                    buffer[pos - 1] = \"0\";\r\n                                    return { \"pos\": pos, \"c\": chrs.charAt(0) };\r\n                                }\r\n                            }\r\n                        }\r\n                        return isValid;\r\n                    },\r\n                    cardinality: 2,\r\n                    prevalidator: [{\r\n                        validator: function (chrs, buffer, pos, strict, opts) {\r\n                            var isValid = opts.regex.val1pre.test(chrs);\r\n                            if (!strict && !isValid) {\r\n                                isValid = opts.regex.val1.test(\"0\" + chrs);\r\n                                if (isValid) {\r\n                                    buffer[pos] = \"0\";\r\n                                    pos++;\r\n                                    return { \"pos\": pos };\r\n                                }\r\n                            }\r\n                            return isValid;\r\n                        }, cardinality: 1\r\n                    }]\r\n                },\r\n                '2': { //val2 ~ day or month\r\n                    validator: function (chrs, buffer, pos, strict, opts) {\r\n                        var frontValue = buffer.join('').substr(0, 3);\r\n                        if (frontValue.indexOf(opts.placeholder[0]) != -1) frontValue = \"01\" + opts.separator;\r\n                        var isValid = opts.regex.val2(opts.separator).test(frontValue + chrs);\r\n                        if (!strict && !isValid) {\r\n                            if (chrs.charAt(1) == opts.separator || \"-./\".indexOf(chrs.charAt(1)) != -1) {\r\n                                isValid = opts.regex.val2(opts.separator).test(frontValue + \"0\" + chrs.charAt(0));\r\n                                if (isValid) {\r\n                                    buffer[pos - 1] = \"0\";\r\n                                    return { \"pos\": pos, \"c\": chrs.charAt(0) };\r\n                                }\r\n                            }\r\n                        }\r\n                        return isValid;\r\n                    },\r\n                    cardinality: 2,\r\n                    prevalidator: [{\r\n                        validator: function (chrs, buffer, pos, strict, opts) {\r\n                            var frontValue = buffer.join('').substr(0, 3);\r\n                            if (frontValue.indexOf(opts.placeholder[0]) != -1) frontValue = \"01\" + opts.separator;\r\n                            var isValid = opts.regex.val2pre(opts.separator).test(frontValue + chrs);\r\n                            if (!strict && !isValid) {\r\n                                isValid = opts.regex.val2(opts.separator).test(frontValue + \"0\" + chrs);\r\n                                if (isValid) {\r\n                                    buffer[pos] = \"0\";\r\n                                    pos++;\r\n                                    return { \"pos\": pos };\r\n                                }\r\n                            }\r\n                            return isValid;\r\n                        }, cardinality: 1\r\n                    }]\r\n                },\r\n                'y': { //year\r\n                    validator: function (chrs, buffer, pos, strict, opts) {\r\n                        if (opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear)) {\r\n                            var dayMonthValue = buffer.join('').substr(0, 6);\r\n                            if (dayMonthValue != opts.leapday)\r\n                                return true;\r\n                            else {\r\n                                var year = parseInt(chrs, 10);//detect leap year\r\n                                if (year % 4 === 0)\r\n                                    if (year % 100 === 0)\r\n                                        if (year % 400 === 0)\r\n                                            return true;\r\n                                        else return false;\r\n                                    else return true;\r\n                                else return false;\r\n                            }\r\n                        } else return false;\r\n                    },\r\n                    cardinality: 4,\r\n                    prevalidator: [\r\n                {\r\n                    validator: function (chrs, buffer, pos, strict, opts) {\r\n                        var isValid = opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);\r\n                        if (!strict && !isValid) {\r\n                            var yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs + \"0\").toString().slice(0, 1);\r\n\r\n                            isValid = opts.isInYearRange(yearPrefix + chrs, opts.yearrange.minyear, opts.yearrange.maxyear);\r\n                            if (isValid) {\r\n                                buffer[pos++] = yearPrefix[0];\r\n                                return { \"pos\": pos };\r\n                            }\r\n                            yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs + \"0\").toString().slice(0, 2);\r\n\r\n                            isValid = opts.isInYearRange(yearPrefix + chrs, opts.yearrange.minyear, opts.yearrange.maxyear);\r\n                            if (isValid) {\r\n                                buffer[pos++] = yearPrefix[0];\r\n                                buffer[pos++] = yearPrefix[1];\r\n                                return { \"pos\": pos };\r\n                            }\r\n                        }\r\n                        return isValid;\r\n                    },\r\n                    cardinality: 1\r\n                },\r\n                {\r\n                    validator: function (chrs, buffer, pos, strict, opts) {\r\n                        var isValid = opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);\r\n                        if (!strict && !isValid) {\r\n                            var yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs).toString().slice(0, 2);\r\n\r\n                            isValid = opts.isInYearRange(chrs[0] + yearPrefix[1] + chrs[1], opts.yearrange.minyear, opts.yearrange.maxyear);\r\n                            if (isValid) {\r\n                                buffer[pos++] = yearPrefix[1];\r\n                                return { \"pos\": pos };\r\n                            }\r\n\r\n                            yearPrefix = opts.determinebaseyear(opts.yearrange.minyear, opts.yearrange.maxyear, chrs).toString().slice(0, 2);\r\n                            if (opts.isInYearRange(yearPrefix + chrs, opts.yearrange.minyear, opts.yearrange.maxyear)) {\r\n                                var dayMonthValue = buffer.join('').substr(0, 6);\r\n                                if (dayMonthValue != opts.leapday)\r\n                                    isValid = true;\r\n                                else {\r\n                                    var year = parseInt(chrs, 10);//detect leap year\r\n                                    if (year % 4 === 0)\r\n                                        if (year % 100 === 0)\r\n                                            if (year % 400 === 0)\r\n                                                isValid = true;\r\n                                            else isValid = false;\r\n                                        else isValid = true;\r\n                                    else isValid = false;\r\n                                }\r\n                            } else isValid = false;\r\n                            if (isValid) {\r\n                                buffer[pos - 1] = yearPrefix[0];\r\n                                buffer[pos++] = yearPrefix[1];\r\n                                buffer[pos++] = chrs[0];\r\n                                return { \"pos\": pos };\r\n                            }\r\n                        }\r\n                        return isValid;\r\n                    }, cardinality: 2\r\n                },\r\n                {\r\n                    validator: function (chrs, buffer, pos, strict, opts) {\r\n                        return opts.isInYearRange(chrs, opts.yearrange.minyear, opts.yearrange.maxyear);\r\n                    }, cardinality: 3\r\n                }\r\n                    ]\r\n                }\r\n            },\r\n            insertMode: false,\r\n            autoUnmask: false\r\n        },\r\n        'mm/dd/yyyy': {\r\n            placeholder: \"mm/dd/yyyy\",\r\n            alias: \"dd/mm/yyyy\", //reuse functionality of dd/mm/yyyy alias\r\n            regex: {\r\n                val2pre: function (separator) { var escapedSeparator = $.inputmask.escapeRegex.call(this, separator); return new RegExp(\"((0[13-9]|1[012])\" + escapedSeparator + \"[0-3])|(02\" + escapedSeparator + \"[0-2])\"); }, //daypre\r\n                val2: function (separator) { var escapedSeparator = $.inputmask.escapeRegex.call(this, separator); return new RegExp(\"((0[1-9]|1[012])\" + escapedSeparator + \"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])\" + escapedSeparator + \"30)|((0[13578]|1[02])\" + escapedSeparator + \"31)\"); }, //day\r\n                val1pre: new RegExp(\"[01]\"), //monthpre\r\n                val1: new RegExp(\"0[1-9]|1[012]\") //month\r\n            },\r\n            leapday: \"02/29/\",\r\n            onKeyUp: function (e, buffer, opts) {\r\n                var $input = $(this);\r\n                if (e.ctrlKey && e.keyCode == opts.keyCode.RIGHT) {\r\n                    var today = new Date();\r\n                    $input.val((today.getMonth() + 1).toString() + today.getDate().toString() + today.getFullYear().toString());\r\n                }\r\n            }\r\n        },\r\n        'yyyy/mm/dd': {\r\n            mask: \"y/1/2\",\r\n            placeholder: \"yyyy/mm/dd\",\r\n            alias: \"mm/dd/yyyy\",\r\n            leapday: \"/02/29\",\r\n            onKeyUp: function (e, buffer, opts) {\r\n                var $input = $(this);\r\n                if (e.ctrlKey && e.keyCode == opts.keyCode.RIGHT) {\r\n                    var today = new Date();\r\n                    $input.val(today.getFullYear().toString() + (today.getMonth() + 1).toString() + today.getDate().toString());\r\n                }\r\n            },\r\n            definitions: {\r\n                '2': { //val2 ~ day or month\r\n                    validator: function (chrs, buffer, pos, strict, opts) {\r\n                        var frontValue = buffer.join('').substr(5, 3);\r\n                        if (frontValue.indexOf(opts.placeholder[5]) != -1) frontValue = \"01\" + opts.separator;\r\n                        var isValid = opts.regex.val2(opts.separator).test(frontValue + chrs);\r\n                        if (!strict && !isValid) {\r\n                            if (chrs.charAt(1) == opts.separator || \"-./\".indexOf(chrs.charAt(1)) != -1) {\r\n                                isValid = opts.regex.val2(opts.separator).test(frontValue + \"0\" + chrs.charAt(0));\r\n                                if (isValid) {\r\n                                    buffer[pos - 1] = \"0\";\r\n                                    return { \"pos\": pos, \"c\": chrs.charAt(0) };\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        //check leap yeap\r\n                        if (isValid) {\r\n                            var dayMonthValue = buffer.join('').substr(4, 4) + chrs;\r\n                            if (dayMonthValue != opts.leapday)\r\n                                return true;\r\n                            else {\r\n                                var year = parseInt(buffer.join('').substr(0, 4), 10);  //detect leap year\r\n                                if (year % 4 === 0)\r\n                                    if (year % 100 === 0)\r\n                                        if (year % 400 === 0)\r\n                                            return true;\r\n                                        else return false;\r\n                                    else return true;\r\n                                else return false;\r\n                            }\r\n                        }\r\n\r\n                        return isValid;\r\n                    },\r\n                    cardinality: 2,\r\n                    prevalidator: [{\r\n                        validator: function (chrs, buffer, pos, strict, opts) {\r\n                            var frontValue = buffer.join('').substr(5, 3);\r\n                            if (frontValue.indexOf(opts.placeholder[5]) != -1) frontValue = \"01\" + opts.separator;\r\n                            var isValid = opts.regex.val2pre(opts.separator).test(frontValue + chrs);\r\n                            if (!strict && !isValid) {\r\n                                isValid = opts.regex.val2(opts.separator).test(frontValue + \"0\" + chrs);\r\n                                if (isValid) {\r\n                                    buffer[pos] = \"0\";\r\n                                    pos++;\r\n                                    return { \"pos\": pos };\r\n                                }\r\n                            }\r\n                            return isValid;\r\n                        }, cardinality: 1\r\n                    }]\r\n                }\r\n            }\r\n        },\r\n        'dd.mm.yyyy': {\r\n            mask: \"1.2.y\",\r\n            placeholder: \"dd.mm.yyyy\",\r\n            leapday: \"29.02.\",\r\n            separator: '.',\r\n            alias: \"dd/mm/yyyy\"\r\n        },\r\n        'dd-mm-yyyy': {\r\n            mask: \"1-2-y\",\r\n            placeholder: \"dd-mm-yyyy\",\r\n            leapday: \"29-02-\",\r\n            separator: '-',\r\n            alias: \"dd/mm/yyyy\"\r\n        },\r\n        'mm.dd.yyyy': {\r\n            mask: \"1.2.y\",\r\n            placeholder: \"mm.dd.yyyy\",\r\n            leapday: \"02.29.\",\r\n            separator: '.',\r\n            alias: \"mm/dd/yyyy\"\r\n        },\r\n        'mm-dd-yyyy': {\r\n            mask: \"1-2-y\",\r\n            placeholder: \"mm-dd-yyyy\",\r\n            leapday: \"02-29-\",\r\n            separator: '-',\r\n            alias: \"mm/dd/yyyy\"\r\n        },\r\n        'yyyy.mm.dd': {\r\n            mask: \"y.1.2\",\r\n            placeholder: \"yyyy.mm.dd\",\r\n            leapday: \".02.29\",\r\n            separator: '.',\r\n            alias: \"yyyy/mm/dd\"\r\n        },\r\n        'yyyy-mm-dd': {\r\n            mask: \"y-1-2\",\r\n            placeholder: \"yyyy-mm-dd\",\r\n            leapday: \"-02-29\",\r\n            separator: '-',\r\n            alias: \"yyyy/mm/dd\"\r\n        },\r\n        'datetime': {\r\n            mask: \"1/2/y h:s\",\r\n            placeholder: \"dd/mm/yyyy hh:mm\",\r\n            alias: \"dd/mm/yyyy\",\r\n            regex: {\r\n                hrspre: new RegExp(\"[012]\"), //hours pre\r\n                hrs24: new RegExp(\"2[0-9]|1[3-9]\"),\r\n                hrs: new RegExp(\"[01][0-9]|2[0-3]\"), //hours\r\n                ampm: new RegExp(\"^[a|p|A|P][m|M]\")\r\n            },\r\n            timeseparator: ':',\r\n            hourFormat: \"24\", // or 12\r\n            definitions: {\r\n                'h': { //hours\r\n                    validator: function (chrs, buffer, pos, strict, opts) {\r\n                        var isValid = opts.regex.hrs.test(chrs);\r\n                        if (!strict && !isValid) {\r\n                            if (chrs.charAt(1) == opts.timeseparator || \"-.:\".indexOf(chrs.charAt(1)) != -1) {\r\n                                isValid = opts.regex.hrs.test(\"0\" + chrs.charAt(0));\r\n                                if (isValid) {\r\n                                    buffer[pos - 1] = \"0\";\r\n                                    buffer[pos] = chrs.charAt(0);\r\n                                    pos++;\r\n                                    return { \"pos\": pos };\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (isValid && opts.hourFormat !== \"24\" && opts.regex.hrs24.test(chrs)) {\r\n\r\n                            var tmp = parseInt(chrs, 10);\r\n\r\n                            if (tmp == 24) {\r\n                                buffer[pos + 5] = \"a\";\r\n                                buffer[pos + 6] = \"m\";\r\n                            } else {\r\n                                buffer[pos + 5] = \"p\";\r\n                                buffer[pos + 6] = \"m\";\r\n                            }\r\n\r\n                            tmp = tmp - 12;\r\n\r\n                            if (tmp < 10) {\r\n                                buffer[pos] = tmp.toString();\r\n                                buffer[pos - 1] = \"0\";\r\n                            } else {\r\n                                buffer[pos] = tmp.toString().charAt(1);\r\n                                buffer[pos - 1] = tmp.toString().charAt(0);\r\n                            }\r\n\r\n                            return { \"pos\": pos, \"c\": buffer[pos] };\r\n                        }\r\n\r\n                        return isValid;\r\n                    },\r\n                    cardinality: 2,\r\n                    prevalidator: [{\r\n                        validator: function (chrs, buffer, pos, strict, opts) {\r\n                            var isValid = opts.regex.hrspre.test(chrs);\r\n                            if (!strict && !isValid) {\r\n                                isValid = opts.regex.hrs.test(\"0\" + chrs);\r\n                                if (isValid) {\r\n                                    buffer[pos] = \"0\";\r\n                                    pos++;\r\n                                    return { \"pos\": pos };\r\n                                }\r\n                            }\r\n                            return isValid;\r\n                        }, cardinality: 1\r\n                    }]\r\n                },\r\n                't': { //am/pm\r\n                    validator: function (chrs, buffer, pos, strict, opts) {\r\n                        return opts.regex.ampm.test(chrs + \"m\");\r\n                    },\r\n                    casing: \"lower\",\r\n                    cardinality: 1\r\n                }\r\n            },\r\n            insertMode: false,\r\n            autoUnmask: false\r\n        },\r\n        'datetime12': {\r\n            mask: \"1/2/y h:s t\\\\m\",\r\n            placeholder: \"dd/mm/yyyy hh:mm xm\",\r\n            alias: \"datetime\",\r\n            hourFormat: \"12\"\r\n        },\r\n        'hh:mm t': {\r\n            mask: \"h:s t\\\\m\",\r\n            placeholder: \"hh:mm xm\",\r\n            alias: \"datetime\",\r\n            hourFormat: \"12\"\r\n        },\r\n        'h:s t': {\r\n            mask: \"h:s t\\\\m\",\r\n            placeholder: \"hh:mm xm\",\r\n            alias: \"datetime\",\r\n            hourFormat: \"12\"\r\n        },\r\n        'hh:mm:ss': {\r\n            mask: \"h:s:s\",\r\n            autoUnmask: false\r\n        },\r\n        'hh:mm': {\r\n            mask: \"h:s\",\r\n            autoUnmask: false\r\n        },\r\n        'date': {\r\n            alias: \"dd/mm/yyyy\" // \"mm/dd/yyyy\"\r\n        },\r\n        'mm/yyyy': {\r\n            mask: \"1/y\",\r\n            placeholder: \"mm/yyyy\",\r\n            leapday: \"donotuse\",\r\n            separator: '/',\r\n            alias: \"mm/dd/yyyy\"\r\n        }\r\n    });\r\n})(jQuery);\r\n","/*\r\nInput Mask plugin extensions\r\nhttp://github.com/RobinHerbots/jquery.inputmask\r\nCopyright (c) 2010 - 2014 Robin Herbots\r\nLicensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\r\nVersion: 0.0.0\r\n\r\nOptional extensions on the jquery.inputmask base\r\n*/\r\n(function ($) {\r\n    //extra definitions\r\n    $.extend($.inputmask.defaults.definitions, {\r\n        'A': {\r\n            validator: \"[A-Za-z]\",\r\n            cardinality: 1,\r\n            casing: \"upper\" //auto uppercasing\r\n        },\r\n        '#': {\r\n            validator: \"[A-Za-z\\u0410-\\u044F\\u0401\\u04510-9]\",\r\n            cardinality: 1,\r\n            casing: \"upper\"\r\n        }\r\n    });\r\n    $.extend($.inputmask.defaults.aliases, {\r\n        'url': {\r\n            mask: \"ir\",\r\n            placeholder: \"\",\r\n            separator: \"\",\r\n            defaultPrefix: \"http://\",\r\n            regex: {\r\n                urlpre1: new RegExp(\"[fh]\"),\r\n                urlpre2: new RegExp(\"(ft|ht)\"),\r\n                urlpre3: new RegExp(\"(ftp|htt)\"),\r\n                urlpre4: new RegExp(\"(ftp:|http|ftps)\"),\r\n                urlpre5: new RegExp(\"(ftp:/|ftps:|http:|https)\"),\r\n                urlpre6: new RegExp(\"(ftp://|ftps:/|http:/|https:)\"),\r\n                urlpre7: new RegExp(\"(ftp://|ftps://|http://|https:/)\"),\r\n                urlpre8: new RegExp(\"(ftp://|ftps://|http://|https://)\")\r\n            },\r\n            definitions: {\r\n                'i': {\r\n                    validator: function (chrs, buffer, pos, strict, opts) {\r\n                        return true;\r\n                    },\r\n                    cardinality: 8,\r\n                    prevalidator: (function () {\r\n                        var result = [], prefixLimit = 8;\r\n                        for (var i = 0; i < prefixLimit; i++) {\r\n                            result[i] = (function () {\r\n                                var j = i;\r\n                                return {\r\n                                    validator: function (chrs, buffer, pos, strict, opts) {\r\n                                        if (opts.regex[\"urlpre\" + (j + 1)]) {\r\n                                            var tmp = chrs, k;\r\n                                            if (((j + 1) - chrs.length) > 0) {\r\n                                                tmp = buffer.join('').substring(0, ((j + 1) - chrs.length)) + \"\" + tmp;\r\n                                            }\r\n                                            var isValid = opts.regex[\"urlpre\" + (j + 1)].test(tmp);\r\n                                            if (!strict && !isValid) {\r\n                                                pos = pos - j;\r\n                                                for (k = 0; k < opts.defaultPrefix.length; k++) {\r\n                                                    buffer[pos] = opts.defaultPrefix[k]; pos++;\r\n                                                }\r\n                                                for (k = 0; k < tmp.length - 1; k++) {\r\n                                                    buffer[pos] = tmp[k]; pos++;\r\n                                                }\r\n                                                return { \"pos\": pos };\r\n                                            }\r\n                                            return isValid;\r\n                                        } else {\r\n                                            return false;\r\n                                        }\r\n                                    }, cardinality: j\r\n                                };\r\n                            })();\r\n                        }\r\n                        return result;\r\n                    })()\r\n                },\r\n                \"r\": {\r\n                    validator: \".\",\r\n                    cardinality: 50\r\n                }\r\n            },\r\n            insertMode: false,\r\n            autoUnmask: false\r\n        },\r\n        \"ip\": { //ip-address mask\r\n            mask: [\"[[x]y]z.[[x]y]z.[[x]y]z.x[yz]\", \"[[x]y]z.[[x]y]z.[[x]y]z.[[x]y][z]\"],\r\n            definitions: {\r\n                'x': {\r\n                    validator: \"[012]\",\r\n                    cardinality: 1,\r\n                    definitionSymbol: \"i\"\r\n                },\r\n                'y': {\r\n                    validator: function (chrs, buffer, pos, strict, opts) {\r\n                        if (pos - 1 > -1 && buffer[pos - 1] != \".\")\r\n                            chrs = buffer[pos - 1] + chrs;\r\n                        else chrs = \"0\" + chrs;\r\n                        return new RegExp(\"2[0-5]|[01][0-9]\").test(chrs);\r\n                    },\r\n                    cardinality: 1,\r\n                    definitionSymbol: \"i\"\r\n                },\r\n                'z': {\r\n                    validator: function (chrs, buffer, pos, strict, opts) {\r\n                        if (pos - 1 > -1 && buffer[pos - 1] != \".\") {\r\n                            chrs = buffer[pos - 1] + chrs;\r\n                            if (pos - 2 > -1 && buffer[pos - 2] != \".\") {\r\n                                chrs = buffer[pos - 2] + chrs;\r\n                            } else chrs = \"0\" + chrs;\r\n                        } else chrs = \"00\" + chrs;\r\n                        return new RegExp(\"25[0-5]|2[0-4][0-9]|[01][0-9][0-9]\").test(chrs);\r\n                    },\r\n                    cardinality: 1,\r\n                    definitionSymbol: \"i\"\r\n                }\r\n            }\r\n        }\r\n    });\r\n})(jQuery);\r\n","(function ($) {\r\n    \"use strict\";\r\n    if (!$.browser) {\r\n        $.browser = {};\r\n        $.browser.mozilla = /mozilla/.test(navigator.userAgent.toLowerCase()) && !/webkit/.test(navigator.userAgent.toLowerCase());\r\n        $.browser.webkit = /webkit/.test(navigator.userAgent.toLowerCase());\r\n        $.browser.opera = /opera/.test(navigator.userAgent.toLowerCase());\r\n        $.browser.msie = /msie/.test(navigator.userAgent.toLowerCase());\r\n        $.browser.device = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase());\r\n    }\r\n\r\n    var defaultOptions = {\r\n                prefix: \"\",\r\n                suffix: \"\",\r\n                affixesStay: true,\r\n                thousands: \",\",\r\n                decimal: \".\",\r\n                precision: 2,\r\n                allowZero: false,\r\n                allowNegative: false,\r\n                doubleClickSelection: true,\r\n                allowEmpty: false,\r\n                bringCaretAtEndOnFocus: true\r\n            },\r\n\t\tmethods = {\r\n        destroy: function () {\r\n            $(this).unbind(\".maskMoney\");\r\n\r\n            if ($.browser.msie) {\r\n                this.onpaste = null;\r\n            }\r\n            return this;\r\n        },\r\n\r\n        applyMask: function (value) {\r\n            var $input = $(this);\r\n            // data-* api\r\n            var settings = $input.data(\"settings\");\r\n            return maskValue(value, settings);\r\n        },\r\n\r\n        mask: function (value) {\r\n            return this.each(function () {\r\n                var $this = $(this);\r\n                if (typeof value === \"number\") {\r\n                    $this.val(value);\r\n                }\r\n                return $this.trigger(\"mask\");\r\n            });\r\n        },\r\n\r\n        unmasked: function () {\r\n            return this.map(function () {\r\n                var value = ($(this).val() || \"0\"),\r\n                    isNegative = value.indexOf(\"-\") !== -1,\r\n                    decimalPart;\r\n                // get the last position of the array that is a number(coercion makes \"\" to be evaluated as false)\r\n                $(value.split(/\\D/).reverse()).each(function (index, element) {\r\n                    if (element) {\r\n                        decimalPart = element;\r\n                        return false;\r\n                    }\r\n                });\r\n                value = value.replace(/\\D/g, \"\");\r\n                value = value.replace(new RegExp(decimalPart + \"$\"), \".\" + decimalPart);\r\n                if (isNegative) {\r\n                    value = \"-\" + value;\r\n                }\r\n                return parseFloat(value);\r\n            });\r\n        },\r\n\r\n\t\tunmaskedWithOptions: function () {\r\n            return this.map(function () {\r\n                var value = ($(this).val() || \"0\"),\r\n\t\t\t\t\tsettings = $(this).data(\"settings\") || defaultOptions,\r\n\t\t\t\t\tregExp = new RegExp((settings.thousandsForUnmasked || settings.thousands), \"g\");\r\n                value = value.replace(regExp, \"\");\r\n                return parseFloat(value);\r\n            });\r\n        },\r\n\r\n        init: function (parameters) {\r\n\t\t\t// the default options should not be shared with others\r\n            parameters = $.extend($.extend({}, defaultOptions), parameters);\r\n\r\n            return this.each(function () {\r\n                var $input = $(this), settings,\r\n                    onFocusValue;\r\n\r\n                // data-* api\r\n                settings = $.extend({}, parameters);\r\n                settings = $.extend(settings, $input.data());\r\n\r\n                // Store settings for use with the applyMask method.\r\n                $input.data(\"settings\", settings);\r\n\r\n\r\n                function getInputSelection() {\r\n                    var el = $input.get(0),\r\n                        start = 0,\r\n                        end = 0,\r\n                        normalizedValue,\r\n                        range,\r\n                        textInputRange,\r\n                        len,\r\n                        endRange;\r\n\r\n                    if (typeof el.selectionStart === \"number\" && typeof el.selectionEnd === \"number\") {\r\n                        start = el.selectionStart;\r\n                        end = el.selectionEnd;\r\n                    } else {\r\n                        range = document.selection.createRange();\r\n\r\n                        if (range && range.parentElement() === el) {\r\n                            len = el.value.length;\r\n                            normalizedValue = el.value.replace(/\\r\\n/g, \"\\n\");\r\n\r\n                            // Create a working TextRange that lives only in the input\r\n                            textInputRange = el.createTextRange();\r\n                            textInputRange.moveToBookmark(range.getBookmark());\r\n\r\n                            // Check if the start and end of the selection are at the very end\r\n                            // of the input, since moveStart/moveEnd doesn't return what we want\r\n                            // in those cases\r\n                            endRange = el.createTextRange();\r\n                            endRange.collapse(false);\r\n\r\n                            if (textInputRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\r\n                                start = end = len;\r\n                            } else {\r\n                                start = -textInputRange.moveStart(\"character\", -len);\r\n                                start += normalizedValue.slice(0, start).split(\"\\n\").length - 1;\r\n\r\n                                if (textInputRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\r\n                                    end = len;\r\n                                } else {\r\n                                    end = -textInputRange.moveEnd(\"character\", -len);\r\n                                    end += normalizedValue.slice(0, end).split(\"\\n\").length - 1;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return {\r\n                        start: start,\r\n                        end: end\r\n                    };\r\n                } // getInputSelection\r\n\r\n                function canInputMoreNumbers() {\r\n                    var haventReachedMaxLength = !($input.val().length >= $input.attr(\"maxlength\") && $input.attr(\"maxlength\") >= 0),\r\n                        selection = getInputSelection(),\r\n                        start = selection.start,\r\n                        end = selection.end,\r\n                        haveNumberSelected = (selection.start !== selection.end && $input.val().substring(start, end).match(/\\d/)) ? true : false,\r\n                        startWithZero = ($input.val().substring(0, 1) === \"0\");\r\n                    return haventReachedMaxLength || haveNumberSelected || startWithZero;\r\n                }\r\n\r\n                function setCursorPosition(pos) {\r\n                    // Do not set the position if\r\n                    // the we're formatting on blur.\r\n                    // This is because we do not want\r\n                    // to refocus on the control after\r\n                    // the blur.\r\n                    if (!!settings.formatOnBlur) {\r\n                        return;\r\n                    }\r\n\r\n                    $input.each(function (index, elem) {\r\n                        if (elem.setSelectionRange) {\r\n                            elem.focus();\r\n                            elem.setSelectionRange(pos, pos);\r\n                        } else if (elem.createTextRange) {\r\n                            var range = elem.createTextRange();\r\n                            range.collapse(true);\r\n                            range.moveEnd(\"character\", pos);\r\n                            range.moveStart(\"character\", pos);\r\n                            range.select();\r\n                        }\r\n                    });\r\n                }\r\n\r\n                function maskAndPosition(startPos) {\r\n                    var originalLen = $input.val().length,\r\n                        newLen;\r\n                    $input.val(maskValue($input.val(), settings));\r\n                    newLen = $input.val().length;\r\n                    // If the we're using the reverse option,\r\n                    // do not put the cursor at the end of\r\n                    // the input. The reverse option allows\r\n                    // the user to input text from left to right.\r\n                    if (!settings.reverse) {\r\n                        startPos = startPos - (originalLen - newLen);\r\n                    }\r\n                    setCursorPosition(startPos);\r\n                }\r\n\r\n                function mask() {\r\n                    var value = $input.val();\r\n                    if (settings.allowEmpty && value === \"\") {\r\n                        return;\r\n                    }\r\n                    var isNumber = !isNaN(value);\r\n\t\t\t\t\tvar decimalPointIndex = isNumber? value.indexOf(\".\"): value.indexOf(settings.decimal);\r\n                    if (settings.precision > 0) {\r\n\t\t\t\t\t\tif(decimalPointIndex < 0){\r\n\t\t\t\t\t\t\tvalue += settings.decimal + new Array(settings.precision + 1).join(0);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t// If the following decimal part dosen't have enough length against the precision, it needs to be filled with zeros.\r\n\t\t\t\t\t\t\tvar integerPart = value.slice(0, decimalPointIndex),\r\n\t\t\t\t\t\t\t\tdecimalPart = value.slice(decimalPointIndex + 1);\r\n\t\t\t\t\t\t\tvalue = integerPart + settings.decimal + decimalPart +\r\n\t\t\t\t\t\t\t\t\tnew Array((settings.precision + 1) - decimalPart.length).join(0);\r\n\t\t\t\t\t\t}\r\n                    } else if (decimalPointIndex > 0) {\r\n                        // if the precision is 0, discard the decimal part\r\n                        value = value.slice(0, decimalPointIndex);\r\n                    }\r\n                    $input.val(maskValue(value, settings));\r\n                }\r\n\r\n                function changeSign() {\r\n                    var inputValue = $input.val();\r\n                    if (settings.allowNegative) {\r\n                        if (inputValue !== \"\" && inputValue.charAt(0) === \"-\") {\r\n                            return inputValue.replace(\"-\", \"\");\r\n                        } else {\r\n                            return \"-\" + inputValue;\r\n                        }\r\n                    } else {\r\n                        return inputValue;\r\n                    }\r\n                }\r\n\r\n                function preventDefault(e) {\r\n                    if (e.preventDefault) { //standard browsers\r\n                        e.preventDefault();\r\n                    } else { // old internet explorer\r\n                        e.returnValue = false;\r\n                    }\r\n                }\r\n\r\n                function fixMobile() {\r\n                    if ($.browser.device) {\r\n                        $input.attr(\"type\", \"tel\");\r\n                    }\r\n                }\r\n\r\n                function keypressEvent(e) {\r\n                    e = e || window.event;\r\n                    var key = e.which || e.charCode || e.keyCode,\r\n                        decimalKeyCode = settings.decimal.charCodeAt(0);\r\n                    //added to handle an IE \"special\" event\r\n                    if (key === undefined) {\r\n                        return false;\r\n                    }\r\n\r\n                    // any key except the numbers 0-9. if we're using settings.reverse,\r\n                    // allow the user to input the decimal key\r\n                    if ((key < 48 || key > 57) && (key !== decimalKeyCode || !settings.reverse)) {\r\n                        return handleAllKeysExceptNumericalDigits(key, e);\r\n                    } else if (!canInputMoreNumbers()) {\r\n                        return false;\r\n                    } else {\r\n                        if (key === decimalKeyCode && shouldPreventDecimalKey()) {\r\n                            return false;\r\n                        }\r\n                        if (settings.formatOnBlur) {\r\n                            return true;\r\n                        }\r\n                        preventDefault(e);\r\n                        applyMask(e);\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                function shouldPreventDecimalKey() {\r\n                    // If all text is selected, we can accept the decimal\r\n                    // key because it will replace everything.\r\n                    if (isAllTextSelected()) {\r\n                        return false;\r\n                    }\r\n\r\n                    return alreadyContainsDecimal();\r\n                }\r\n\r\n                function isAllTextSelected() {\r\n                    var length = $input.val().length;\r\n                    var selection = getInputSelection();\r\n                    // This should if all text is selected or if the\r\n                    // input is empty.\r\n                    return selection.start === 0 && selection.end === length;\r\n                }\r\n\r\n                function alreadyContainsDecimal() {\r\n                    return $input.val().indexOf(settings.decimal) > -1;\r\n                }\r\n\r\n                function applyMask(e) {\r\n                    e = e || window.event;\r\n                    var key = e.which || e.charCode || e.keyCode,\r\n                        keyPressedChar = \"\",\r\n                        selection,\r\n                        startPos,\r\n                        endPos,\r\n                        value;\r\n                    if (key >= 48 && key <= 57) {\r\n                        keyPressedChar = String.fromCharCode(key);\r\n                    }\r\n                    selection = getInputSelection();\r\n                    startPos = selection.start;\r\n                    endPos = selection.end;\r\n                    value = $input.val();\r\n                    $input.val(value.substring(0, startPos) + keyPressedChar + value.substring(endPos, value.length));\r\n                    maskAndPosition(startPos + 1);\r\n                }\r\n\r\n                function handleAllKeysExceptNumericalDigits(key, e) {\r\n                    // -(minus) key\r\n                    if (key === 45) {\r\n                        $input.val(changeSign());\r\n                        return false;\r\n                        // +(plus) key\r\n                    } else if (key === 43) {\r\n                        $input.val($input.val().replace(\"-\", \"\"));\r\n                        return false;\r\n                        // enter key or tab key\r\n                    } else if (key === 13 || key === 9) {\r\n                        return true;\r\n                    } else if ($.browser.mozilla && (key === 37 || key === 39) && e.charCode === 0) {\r\n                        // needed for left arrow key or right arrow key with firefox\r\n                        // the charCode part is to avoid allowing \"%\"(e.charCode 0, e.keyCode 37)\r\n                        return true;\r\n                    } else { // any other key with keycode less than 48 and greater than 57\r\n                        preventDefault(e);\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                function keydownEvent(e) {\r\n                    e = e || window.event;\r\n                    var key = e.which || e.charCode || e.keyCode,\r\n                        selection,\r\n                        startPos,\r\n                        endPos,\r\n                        value,\r\n                        lastNumber;\r\n                    //needed to handle an IE \"special\" event\r\n                    if (key === undefined) {\r\n                        return false;\r\n                    }\r\n\r\n                    selection = getInputSelection();\r\n                    startPos = selection.start;\r\n                    endPos = selection.end;\r\n\r\n                    if (key === 8 || key === 46 || key === 63272) { // backspace or delete key (with special case for safari)\r\n                        preventDefault(e);\r\n\r\n                        value = $input.val();\r\n\r\n                        // not a selection\r\n                        if (startPos === endPos) {\r\n                            // backspace\r\n                            if (key === 8) {\r\n                                if (settings.suffix === \"\") {\r\n                                    startPos -= 1;\r\n                                } else {\r\n                                    // needed to find the position of the last number to be erased\r\n                                    lastNumber = value.split(\"\").reverse().join(\"\").search(/\\d/);\r\n                                    startPos = value.length - lastNumber - 1;\r\n                                    endPos = startPos + 1;\r\n                                }\r\n                                //delete\r\n                            } else {\r\n                                endPos += 1;\r\n                            }\r\n                        }\r\n\r\n                        $input.val(value.substring(0, startPos) + value.substring(endPos, value.length));\r\n\r\n                        maskAndPosition(startPos);\r\n                        return false;\r\n                    } else if (key === 9) { // tab key\r\n                        return true;\r\n                    } else { // any other key\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                function focusEvent() {\r\n                    onFocusValue = $input.val();\r\n                    mask();\r\n                    var input = $input.get(0),\r\n                        textRange;\r\n\r\n                    if (!!settings.selectAllOnFocus) {\r\n                        input.select();\r\n                    } else if (input.createTextRange && settings.bringCaretAtEndOnFocus) {\r\n                        textRange = input.createTextRange();\r\n                        textRange.collapse(false); // set the cursor at the end of the input\r\n                        textRange.select();\r\n                    }\r\n                }\r\n\r\n                function cutPasteEvent() {\r\n                    setTimeout(function () {\r\n                        mask();\r\n                    }, 0);\r\n                }\r\n\r\n                function getDefaultMask() {\r\n                    var n = parseFloat(\"0\") / Math.pow(10, settings.precision);\r\n                    return (n.toFixed(settings.precision)).replace(new RegExp(\"\\\\.\", \"g\"), settings.decimal);\r\n                }\r\n\r\n                function blurEvent(e) {\r\n                    if ($.browser.msie) {\r\n                        keypressEvent(e);\r\n                    }\r\n\r\n                    if (!!settings.formatOnBlur && $input.val() !== onFocusValue) {\r\n                        applyMask(e);\r\n                    }\r\n\r\n                    if ($input.val() === \"\" && settings.allowEmpty) {\r\n                        $input.val(\"\");\r\n                    } else if ($input.val() === \"\" || $input.val() === setSymbol(getDefaultMask(), settings)) {\r\n                        if (!settings.allowZero) {\r\n                            $input.val(\"\");\r\n                        } else if (!settings.affixesStay) {\r\n                            $input.val(getDefaultMask());\r\n                        } else {\r\n                            $input.val(setSymbol(getDefaultMask(), settings));\r\n                        }\r\n                    } else {\r\n                        if (!settings.affixesStay) {\r\n                            var newValue = $input.val().replace(settings.prefix, \"\").replace(settings.suffix, \"\");\r\n                            $input.val(newValue);\r\n                        }\r\n                    }\r\n                    if ($input.val() !== onFocusValue) {\r\n                        $input.change();\r\n                    }\r\n                }\r\n\r\n                function clickEvent() {\r\n                    var input = $input.get(0),\r\n                        length;\r\n                    if (!!settings.selectAllOnFocus) {\r\n                        // selectAllOnFocus will be handled by\r\n                        // the focus event. The focus event is\r\n                        // also fired when the input is clicked.\r\n                        return;\r\n                    } else if (input.setSelectionRange && settings.bringCaretAtEndOnFocus) {\r\n                        length = $input.val().length;\r\n                        input.setSelectionRange(length, length);\r\n                    } else {\r\n                        $input.val($input.val());\r\n                    }\r\n                }\r\n\r\n                function doubleClickEvent() {\r\n                    var input = $input.get(0),\r\n                        start,\r\n                        length;\r\n                    if (input.setSelectionRange && settings.bringCaretAtEndOnFocus) {\r\n                        length = $input.val().length;\r\n                        start = settings.doubleClickSelection ? 0 : length;\r\n                        input.setSelectionRange(start, length);\r\n                    } else {\r\n                        $input.val($input.val());\r\n                    }\r\n                }\r\n\r\n                fixMobile();\r\n                $input.unbind(\".maskMoney\");\r\n                $input.bind(\"keypress.maskMoney\", keypressEvent);\r\n                $input.bind(\"keydown.maskMoney\", keydownEvent);\r\n                $input.bind(\"blur.maskMoney\", blurEvent);\r\n                $input.bind(\"focus.maskMoney\", focusEvent);\r\n                $input.bind(\"click.maskMoney\", clickEvent);\r\n                $input.bind(\"dblclick.maskMoney\", doubleClickEvent);\r\n                $input.bind(\"cut.maskMoney\", cutPasteEvent);\r\n                $input.bind(\"paste.maskMoney\", cutPasteEvent);\r\n                $input.bind(\"mask.maskMoney\", mask);\r\n            });\r\n        }\r\n    };\r\n\r\n    function setSymbol(value, settings) {\r\n        var operator = \"\";\r\n        if (value.indexOf(\"-\") > -1) {\r\n            value = value.replace(\"-\", \"\");\r\n            operator = \"-\";\r\n        }\r\n        if (value.indexOf(settings.prefix) > -1) {\r\n            value = value.replace(settings.prefix, \"\");\r\n        }\r\n        if (value.indexOf(settings.suffix) > -1) {\r\n            value = value.replace(settings.suffix, \"\");\r\n        }\r\n        return operator + settings.prefix + value + settings.suffix;\r\n    }\r\n\r\n    function maskValue(value, settings) {\r\n        if (settings.allowEmpty && value === \"\") {\r\n            return \"\";\r\n        }\r\n        if (!!settings.reverse) {\r\n            return maskValueReverse(value, settings);\r\n        }\r\n        return maskValueStandard(value, settings);\r\n    }\r\n\r\n    function maskValueStandard(value, settings) {\r\n        var negative = (value.indexOf(\"-\") > -1 && settings.allowNegative) ? \"-\" : \"\",\r\n            onlyNumbers = value.replace(/[^0-9]/g, \"\"),\r\n            integerPart = onlyNumbers.slice(0, onlyNumbers.length - settings.precision),\r\n            newValue,\r\n            decimalPart,\r\n            leadingZeros;\r\n\r\n        newValue = buildIntegerPart(integerPart, negative, settings);\r\n\r\n        if (settings.precision > 0) {\r\n            if(!isNaN(value) && value.indexOf(\".\")){\r\n                var precision = value.substr(value.indexOf(\".\") + 1);\r\n                onlyNumbers += new Array((settings.precision + 1) - precision.length).join(0);\r\n                integerPart = onlyNumbers.slice(0, onlyNumbers.length - settings.precision);\r\n                newValue = buildIntegerPart(integerPart, negative, settings);\r\n            }\r\n\r\n            decimalPart = onlyNumbers.slice(onlyNumbers.length - settings.precision);\r\n            leadingZeros = new Array((settings.precision + 1) - decimalPart.length).join(0);\r\n            newValue += settings.decimal + leadingZeros + decimalPart;\r\n        }\r\n        return setSymbol(newValue, settings);\r\n    }\r\n\r\n    function maskValueReverse(value, settings) {\r\n        var negative = (value.indexOf(\"-\") > -1 && settings.allowNegative) ? \"-\" : \"\",\r\n            valueWithoutSymbol = value.replace(settings.prefix, \"\").replace(settings.suffix, \"\"),\r\n            integerPart = valueWithoutSymbol.split(settings.decimal)[0],\r\n            newValue,\r\n            decimalPart = \"\";\r\n\r\n        if (integerPart === \"\") {\r\n            integerPart = \"0\";\r\n        }\r\n        newValue = buildIntegerPart(integerPart, negative, settings);\r\n\r\n        if (settings.precision > 0) {\r\n            var arr = valueWithoutSymbol.split(settings.decimal);\r\n            if (arr.length > 1) {\r\n                decimalPart = arr[1];\r\n            }\r\n            newValue += settings.decimal + decimalPart;\r\n            var rounded = Number.parseFloat((integerPart + \".\" + decimalPart)).toFixed(settings.precision);\r\n            var roundedDecimalPart = rounded.toString().split(settings.decimal)[1];\r\n            newValue = newValue.split(settings.decimal)[0] + \".\" + roundedDecimalPart;\r\n        }\r\n\r\n        return setSymbol(newValue, settings);\r\n    }\r\n\r\n    function buildIntegerPart(integerPart, negative, settings) {\r\n        // remove initial zeros\r\n        integerPart = integerPart.replace(/^0*/g, \"\");\r\n\r\n        // put settings.thousands every 3 chars\r\n        integerPart = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, settings.thousands);\r\n        if (integerPart === \"\") {\r\n            integerPart = \"0\";\r\n        }\r\n        return negative + integerPart;\r\n    }\r\n\r\n    $.fn.maskMoney = function (method) {\r\n        if (methods[method]) {\r\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof method === \"object\" || !method) {\r\n            return methods.init.apply(this, arguments);\r\n        } else {\r\n            $.error(\"Method \" + method + \" does not exist on jQuery.maskMoney\");\r\n        }\r\n    };\r\n})(window.jQuery || window.Zepto);\r\n","/*!\n  SerializeJSON jQuery plugin.\n  https://github.com/marioizquierdo/jquery.serializeJSON\n  version 2.8.1 (Dec, 2016)\n\n  Copyright (c) 2012, 2017 Mario Izquierdo\n  Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)\n  and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.\n*/\n!function(a){if(\"function\"==typeof define&&define.amd)define([\"jquery\"],a);else if(\"object\"==typeof exports){var b=require(\"jquery\");module.exports=a(b)}else a(window.jQuery||window.Zepto||window.$)}(function(a){\"use strict\";a.fn.serializeJSON=function(b){var c,d,e,f,g,h,i,j,k,l,m,n,o;return c=a.serializeJSON,d=this,e=c.setupOpts(b),f=d.serializeArray(),c.readCheckboxUncheckedValues(f,e,d),g={},a.each(f,function(a,b){h=b.name,i=b.value,k=c.extractTypeAndNameWithNoType(h),l=k.nameWithNoType,m=k.type,m||(m=c.attrFromInputWithName(d,h,\"data-value-type\")),c.validateType(h,m,e),\"skip\"!==m&&(n=c.splitInputNameIntoKeysArray(l),j=c.parseValue(i,h,m,e),o=!j&&c.shouldSkipFalsy(d,h,l,m,e),o||c.deepSet(g,n,j,e))}),g},a.serializeJSON={defaultOptions:{checkboxUncheckedValue:void 0,parseNumbers:!1,parseBooleans:!1,parseNulls:!1,parseAll:!1,parseWithFunction:null,skipFalsyValuesForTypes:[],skipFalsyValuesForFields:[],customTypes:{},defaultTypes:{string:function(a){return String(a)},number:function(a){return Number(a)},boolean:function(a){var b=[\"false\",\"null\",\"undefined\",\"\",\"0\"];return b.indexOf(a)===-1},null:function(a){var b=[\"false\",\"null\",\"undefined\",\"\",\"0\"];return b.indexOf(a)===-1?a:null},array:function(a){return JSON.parse(a)},object:function(a){return JSON.parse(a)},auto:function(b){return a.serializeJSON.parseValue(b,null,null,{parseNumbers:!0,parseBooleans:!0,parseNulls:!0})},skip:null},useIntKeysAsArrayIndex:!1},setupOpts:function(b){var c,d,e,f,g,h;h=a.serializeJSON,null==b&&(b={}),e=h.defaultOptions||{},d=[\"checkboxUncheckedValue\",\"parseNumbers\",\"parseBooleans\",\"parseNulls\",\"parseAll\",\"parseWithFunction\",\"skipFalsyValuesForTypes\",\"skipFalsyValuesForFields\",\"customTypes\",\"defaultTypes\",\"useIntKeysAsArrayIndex\"];for(c in b)if(d.indexOf(c)===-1)throw new Error(\"serializeJSON ERROR: invalid option '\"+c+\"'. Please use one of \"+d.join(\", \"));return f=function(a){return b[a]!==!1&&\"\"!==b[a]&&(b[a]||e[a])},g=f(\"parseAll\"),{checkboxUncheckedValue:f(\"checkboxUncheckedValue\"),parseNumbers:g||f(\"parseNumbers\"),parseBooleans:g||f(\"parseBooleans\"),parseNulls:g||f(\"parseNulls\"),parseWithFunction:f(\"parseWithFunction\"),skipFalsyValuesForTypes:f(\"skipFalsyValuesForTypes\"),skipFalsyValuesForFields:f(\"skipFalsyValuesForFields\"),typeFunctions:a.extend({},f(\"defaultTypes\"),f(\"customTypes\")),useIntKeysAsArrayIndex:f(\"useIntKeysAsArrayIndex\")}},parseValue:function(b,c,d,e){var f,g;return f=a.serializeJSON,g=b,e.typeFunctions&&d&&e.typeFunctions[d]?g=e.typeFunctions[d](b):e.parseNumbers&&f.isNumeric(b)?g=Number(b):!e.parseBooleans||\"true\"!==b&&\"false\"!==b?e.parseNulls&&\"null\"==b&&(g=null):g=\"true\"===b,e.parseWithFunction&&!d&&(g=e.parseWithFunction(g,c)),g},isObject:function(a){return a===Object(a)},isUndefined:function(a){return void 0===a},isValidArrayIndex:function(a){return/^[0-9]+$/.test(String(a))},isNumeric:function(a){return a-parseFloat(a)>=0},optionKeys:function(a){if(Object.keys)return Object.keys(a);var b,c=[];for(b in a)c.push(b);return c},readCheckboxUncheckedValues:function(b,c,d){var e,f,g,h,i;null==c&&(c={}),i=a.serializeJSON,e=\"input[type=checkbox][name]:not(:checked):not([disabled])\",f=d.find(e).add(d.filter(e)),f.each(function(d,e){if(g=a(e),h=g.attr(\"data-unchecked-value\"),null==h&&(h=c.checkboxUncheckedValue),null!=h){if(e.name&&e.name.indexOf(\"[][\")!==-1)throw new Error(\"serializeJSON ERROR: checkbox unchecked values are not supported on nested arrays of objects like '\"+e.name+\"'. See https://github.com/marioizquierdo/jquery.serializeJSON/issues/67\");b.push({name:e.name,value:h})}})},extractTypeAndNameWithNoType:function(a){var b;return(b=a.match(/(.*):([^:]+)$/))?{nameWithNoType:b[1],type:b[2]}:{nameWithNoType:a,type:null}},shouldSkipFalsy:function(b,c,d,e,f){var g=a.serializeJSON,h=g.attrFromInputWithName(b,c,\"data-skip-falsy\");if(null!=h)return\"false\"!==h;var i=f.skipFalsyValuesForFields;if(i&&(i.indexOf(d)!==-1||i.indexOf(c)!==-1))return!0;var j=f.skipFalsyValuesForTypes;return null==e&&(e=\"string\"),!(!j||j.indexOf(e)===-1)},attrFromInputWithName:function(a,b,c){var d,e,f;return d=b.replace(/(:|\\.|\\[|\\]|\\s)/g,\"\\\\$1\"),e='[name=\"'+d+'\"]',f=a.find(e).add(a.filter(e)),f.attr(c)},validateType:function(b,c,d){var e,f;if(f=a.serializeJSON,e=f.optionKeys(d?d.typeFunctions:f.defaultOptions.defaultTypes),c&&e.indexOf(c)===-1)throw new Error(\"serializeJSON ERROR: Invalid type \"+c+\" found in input name '\"+b+\"', please use one of \"+e.join(\", \"));return!0},splitInputNameIntoKeysArray:function(b){var c,d;return d=a.serializeJSON,c=b.split(\"[\"),c=a.map(c,function(a){return a.replace(/\\]/g,\"\")}),\"\"===c[0]&&c.shift(),c},deepSet:function(b,c,d,e){var f,g,h,i,j,k;if(null==e&&(e={}),k=a.serializeJSON,k.isUndefined(b))throw new Error(\"ArgumentError: param 'o' expected to be an object or array, found undefined\");if(!c||0===c.length)throw new Error(\"ArgumentError: param 'keys' expected to be an array with least one element\");f=c[0],1===c.length?\"\"===f?b.push(d):b[f]=d:(g=c[1],\"\"===f&&(i=b.length-1,j=b[i],f=k.isObject(j)&&(k.isUndefined(j[g])||c.length>2)?i:i+1),\"\"===g?!k.isUndefined(b[f])&&a.isArray(b[f])||(b[f]=[]):e.useIntKeysAsArrayIndex&&k.isValidArrayIndex(g)?!k.isUndefined(b[f])&&a.isArray(b[f])||(b[f]=[]):!k.isUndefined(b[f])&&k.isObject(b[f])||(b[f]={}),h=c.slice(1),k.deepSet(b[f],h,d,e))}}});","function modal_delete_ajax(id, route, input_name, text_info, redirect)\r\n{\r\n\r\n    $(\"#modal_title_delete\").html('Excluir');\r\n    $(\"#txt_info\").html(text_info);\r\n  \r\n    $(\"#delete_id\").attr({\r\n        name: input_name,\r\n        value: id\r\n\r\n    });\r\n    $(\"#modal_delete_ajax\").modal('show');\r\n    $(\"#btn_delete_ajax\").click( function(){\r\n        alert('excluir');\r\n       $.ajax({\r\n        url: domain_complet + '/'+route+'/'+id,\r\n        type: 'DELETE',\r\n        dataType: 'json',\r\n        data: $('#form_delete_ajax').serializeJSON(),\r\n        success: function(){\r\n            new PNotify({\r\n                title: 'Sucesso',\r\n                text: 'Registro excluído com sucesso',\r\n                styling: 'fontawesome',       \r\n                type: 'success',\r\n                icon: 'true',\r\n                animation: 'fade',\r\n                delay: 5000,\r\n                animate_speed: \"slow\"\r\n            });\r\n            $(\"#modal_delete_ajax\").modal('hide');\r\n            window.location.href = domain_complet + redirect;\r\n        }\r\n    });\r\n\r\n   });\r\n    \r\n\r\n}\r\n\r\n/*PARA MASCARAR OS TELEFONES PARA 9 DIGITOS*/\r\n/* Máscaras ER */\r\nfunction mascara(o,f){\r\n    v_obj=o;\r\n    v_fun=f;\r\n    setTimeout(\"execmascara()\",1);\r\n}\r\nfunction execmascara(){\r\n    v_obj.value=v_fun(v_obj.value);\r\n}\r\nfunction mtel(v){\r\n    v=v.replace(/\\D/g,\"\");             //Remove tudo o que não é dígito\r\n    v=v.replace(/^(\\d{2})(\\d)/g,\"($1) $2\"); //Coloca parênteses em volta dos dois primeiros dígitos\r\n    v=v.replace(/(\\d)(\\d{4})$/,\"$1-$2\");    //Coloca hífen entre o quarto e o quinto dígitos\r\n    return v;\r\n}\r\nfunction id( el ){\r\n    return document.getElementById( el );\r\n}\r\nwindow.onload = function(){\r\n    \r\n    id('').onkeyup = function(){\r\n        mascara(this, mtel);\r\n    };      \r\n};\r\n\r\n/*  FUNÇÃO GERALMENTE USADA NO MODAL DE CONFIMAÇÃO APOS UMA AÇÃO  */\r\nfunction redirect(route)\r\n{\r\n    window.location.href = domain_complet + '/' + route;\r\n}\r\n\r\nfunction reloadTable(name_table)\r\n{\r\n$(\"#\"+name_table).DataTable().ajax.reload();\r\n}\r\n\r\n","$(document).ready(function () {\r\n\r\n\tfunction limpa_formulário_cep() {\r\n        // Limpa valores do formulário de cep.\r\n        $(\"#logradouro\").val(\"\");\r\n        $(\"#distict_client\").val(\"\");\r\n        $(\"#city_client\").val(\"\");\r\n        $(\"#estate_client\").val(\"\");\r\n\r\n    }\r\n\r\n    //Quando o campo cep perde o foco.\r\n    $(\"#cep_client\").blur(function () {\r\n\r\n        //Nova variável \"cep\" somente com dígitos.\r\n        var cep = $(this).val().replace(/\\D/g, '');\r\n\r\n        //Verifica se campo cep possui valor informado.\r\n        if (cep != \"\") {\r\n\r\n            //Expressão regular para validar o CEP.\r\n            var validacep = /^[0-9]{8}$/;\r\n\r\n            //Valida o formato do CEP.\r\n            if (validacep.test(cep)) {\r\n\r\n                //Preenche os campos com \"...\" enquanto consulta webservice.\r\n\r\n                $(\"#logradouro\").val(\"...\");\r\n                $(\"#distict_client\").val(\"...\");\r\n                $(\"#city_client\").val(\"...\");\r\n                $(\"#estate_client\").val(\"...\");\r\n\r\n                //Consulta o webservice viacep.com.br/\r\n                $.getJSON(\"//viacep.com.br/ws/\" + cep + \"/json/?callback=?\", function (dados) {\r\n\r\n                \tif (!(\"erro\" in dados)) {\r\n                        //Atualiza os campos com os valores da consulta.\r\n                        $(\"#logradouro\").val(dados.logradouro);\r\n                        $(\"#distict_client\").val(dados.bairro);\r\n                        $(\"#city_client\").val(dados.localidade);\r\n                        $(\"#estate_client\").val(dados.uf);\r\n                        $(\"#number_client\").focus();\r\n                    } //end if.\r\n                    else {\r\n                        //CEP pesquisado não foi encontrado.\r\n                        limpa_formulário_cep();\r\n                        alert(\"CEP não encontrado.\");\r\n                    }\r\n                });\r\n            } //end if.\r\n            else {\r\n                //cep é inválido.\r\n                limpa_formulário_cep();\r\n                alert(\"Formato de CEP inválido.\");\r\n            }\r\n        } //end if.\r\n        else {\r\n            //cep sem valor, limpa formulário.\r\n            limpa_formulário_cep();\r\n        }\r\n    });\r\n    /*dados do cliente*/\r\n    $(\"#clients_cpf\").inputmask(\"999.999.999-99\");\r\n    $(\"#clients_birth_date\").inputmask(\"99/99/9999\");\r\n    /*mascara CEP*/\r\n    $(\"#cep_client\").inputmask(\"99.999-999\");\r\n\r\n    \r\n});//fim ready\r\n\r\n$(function () {\r\n\t/*ADICIONANDO TELEFONE DE CLIENTE*/\r\n\tvar click = 2;\r\n\t$(\"#addPhoneClient\").click(function () {\r\n\t\tcount = (click++);\r\n\t\tadd_phone = '<div class=\"col-xs-6 col-md-4\">' +\r\n\t\t'<span>Fone ' + count + '</span>' +\r\n\t\t'<input type=\"text\" name=\"phones_number[]\" class=\"form-control\" onkeyup=\"mascara( this, mtel );\" maxlength=\"15\">' +\r\n\t\t'</div>';\r\n\t\t$(\"#phoneClient\").append(add_phone);\r\n\t})\r\n\r\n\t$(\"#clients_rental_finance\").maskMoney({prefix:'R$ ', allowNegative: true, thousands:'.', decimal:',', affixesStay: false});\r\n\r\n\t$(\"#save_client\").click(function(){\r\n\r\n\t\t$.ajax({\r\n\t\t\turl: domain_complet + '/clientes',\r\n\t\t\ttype: 'POST',\r\n\t\t\tdataType: 'json',\r\n\t\t\tdata:  $(\"#form_client\").serializeJSON(),\r\n\t\t\tsuccess: function(){\r\n\t\t\t\tnew PNotify({\r\n\t\t\t\t\ttitle: 'Sucesso',\r\n\t\t\t\t\ttext: 'Cliente Cadastrado com sucesso',\r\n\t\t\t\t\tstyling: 'fontawesome',       \r\n\t\t\t\t\ttype: 'success',\r\n\t\t\t\t\ticon: 'true',\r\n\t\t\t\t\tanimation: 'fade',\r\n\t\t\t\t\tdelay: 3000,\r\n\t\t\t\t\tanimate_speed: \"slow\"\r\n\t\t\t\t});\r\n\t\t\t\t$(\"#title_info_body\").html('Cliente cadastrado com sucesso');\r\n\t\t\t\t$(\"#title_description_body\").html('Deseja cadastrar um novo cliente?');\r\n\t\t\t\t$(\"#success_redirect\").modal('show');\r\n\t   \t\t//ADICIONANDO REDIRECIONAMENTO NO BOTÃO\r\n\t   \t\t$(\"#redirect_message_sim\").attr('href', domain_complet + '/clientes');\r\n\t   \t\t$(\"#redirect_message_nao\").attr('href', domain_complet + '/');\r\n\r\n\t   \t}\r\n\t   })\r\n\t\t.fail(function() {\r\n\t\t\tnew PNotify({\r\n\t\t\t\ttitle: 'Erro no cadastro',\r\n\t\t\t\ttext: 'Atualize a página ou tente mais tarde',\r\n\t\t\t\tstyling: 'fontawesome',       \r\n\t\t\t\ttype: 'error',\r\n\t\t\t\ticon: 'true',\r\n\t\t\t\tanimation: 'fade',\r\n\t\t\t\tdelay: 5000,\r\n\t\t\t\tanimate_speed: \"slow\"\r\n\t\t\t});\r\n\t\t})\r\n\t\t.always(function() {\r\n\t\t\tconsole.log(\"complete\");\r\n\t\t});\r\n\t\t\r\n});//fim save_client\r\n\r\n});\r\n"]}